{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/pln/source/css/animation.scss","path":"css/animation.scss","modified":1,"renderable":1},{"_id":"themes/pln/source/css/code.scss","path":"css/code.scss","modified":1,"renderable":1},{"_id":"themes/pln/source/css/footer.scss","path":"css/footer.scss","modified":1,"renderable":1},{"_id":"themes/pln/source/css/m.min.css","path":"css/m.min.css","modified":1,"renderable":1},{"_id":"themes/pln/source/css/m.min.css.map","path":"css/m.min.css.map","modified":1,"renderable":1},{"_id":"themes/pln/source/css/main.scss","path":"css/main.scss","modified":1,"renderable":1},{"_id":"themes/pln/source/css/navigator.scss","path":"css/navigator.scss","modified":1,"renderable":1},{"_id":"themes/pln/source/css/pager.scss","path":"css/pager.scss","modified":1,"renderable":1},{"_id":"themes/pln/source/css/posts.scss","path":"css/posts.scss","modified":1,"renderable":1},{"_id":"themes/pln/source/css/search.scss","path":"css/search.scss","modified":1,"renderable":1},{"_id":"themes/pln/source/css/toc.scss","path":"css/toc.scss","modified":1,"renderable":1},{"_id":"themes/pln/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/pln/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/pln/.all-contributorsrc","hash":"a9609f9ab8a71c5f05d5b2131ee2aac69ec79789","modified":1588124913065},{"_id":"themes/pln/.gitignore","hash":"a439ea94c74c10ddd6cb2972603a97efaca2018c","modified":1588124913065},{"_id":"themes/pln/LICENSE","hash":"919776eaadcffcfe7a12b71c0d2302726a4037ee","modified":1588124913065},{"_id":"themes/pln/_config.yml","hash":"468fa4f83361950422a0803d3babe3dc7de8ea45","modified":1588139134514},{"_id":"themes/pln/README.md","hash":"016a6751c014b44d5faf8e717e5ab8db351ecdcc","modified":1588124913065},{"_id":"source/_posts/Introduction-to-Database-Principle-note.md","hash":"5878e935bfa5d207ef4cb0ca09e3d0ca43a57a79","modified":1588126282886},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1588119832538},{"_id":"source/_posts/how-to-build-your-blog.md","hash":"e42087ee72a48cbdef60c4312bd82a3899a2e07e","modified":1588138666051},{"_id":"themes/pln/languages/en.yml","hash":"c3ae8ba9490b3ee126916e5ce9e232a135d4b7f9","modified":1588124913065},{"_id":"themes/pln/languages/zh-CN.yml","hash":"f07c9735fbae1963b3bc5fc3f3fd5af2bd7db2bc","modified":1588124913065},{"_id":"themes/pln/layout/archive.ejs","hash":"577c77a2007f1b6e0115a9c35b75aa8d49f84b8a","modified":1588124913065},{"_id":"themes/pln/layout/index.ejs","hash":"5130955cf290ddfc53750b4f2360974b16ded230","modified":1588124913065},{"_id":"themes/pln/layout/layout.ejs","hash":"752406ec4bc8bfbb25e1e2f98a438c77bd73274e","modified":1588124913065},{"_id":"themes/pln/layout/page.ejs","hash":"033c0f83d699ff11a197fa46bdbf3c347b226d6d","modified":1588124913065},{"_id":"themes/pln/layout/post.ejs","hash":"033c0f83d699ff11a197fa46bdbf3c347b226d6d","modified":1588124913065},{"_id":"themes/pln/screenShots/ver1.0-article.jpg","hash":"43d6668b1ea6f8342c842c1b6cd46e848b351de9","modified":1588124913079},{"_id":"themes/pln/screenShots/ver1.0-dropdown.jpg","hash":"f4d1ca29f532a8eaf88234263d5de706a7fb097c","modified":1588124913079},{"_id":"themes/pln/screenShots/ver1.0-tags.jpg","hash":"507cb86efaa632ed67b6fb4af4f137097f8ce5b7","modified":1588124913082},{"_id":"themes/pln/layout/_partial/after_footer.ejs","hash":"d19990e54339827463442336c370701cb1000a3f","modified":1588124913065},{"_id":"themes/pln/layout/_partial/archive.ejs","hash":"6bf4de6066fd4e8ba5a410143ddb4081d5377422","modified":1588124913065},{"_id":"themes/pln/layout/_partial/article.ejs","hash":"c0651d99d60c3fb31ce8b2aaa2c91fd88a089f5d","modified":1588124913065},{"_id":"themes/pln/layout/_partial/footer.ejs","hash":"1a580c00853fa646276d6cdad1ccb9413dd03e3b","modified":1588124913065},{"_id":"themes/pln/layout/_partial/head.ejs","hash":"e57555ded293ffc5424a7bb7174ceaa779d3916a","modified":1588124913065},{"_id":"themes/pln/layout/_partial/pagination.ejs","hash":"a84f5e9d05a63421c098c51ec4f7706b56deee68","modified":1588124913065},{"_id":"themes/pln/layout/_partial/navigator.ejs","hash":"17b254ca4d1d10235f330b1c6c3ec9606f973b1c","modified":1588124913065},{"_id":"themes/pln/layout/_partial/search.ejs","hash":"bdde8c7fdbb96d7d0ecf6c0eed341a3e273a59f5","modified":1588124913065},{"_id":"themes/pln/screenShots/ver0.9-article.jpg","hash":"3877cf411b7ebc8eef73cddb38477f305eb2cdc9","modified":1588124913069},{"_id":"themes/pln/screenShots/ver0.9-dropdown.jpg","hash":"07d6e84d99ff5960eea53657749c1ae642eb3fac","modified":1588124913072},{"_id":"themes/pln/screenShots/ver0.9-index.jpg","hash":"b82c7d09b44adae132acff47037df5bfb7f48da1","modified":1588124913075},{"_id":"themes/pln/screenShots/ver0.9-tags.jpg","hash":"19ab2cf23beb1c3814968b616e52a9f44d4d939d","modified":1588124913079},{"_id":"themes/pln/screenShots/ver1.0-index.jpg","hash":"502291f046e78d9f13cc77ec7a294f095b0f5f54","modified":1588124913079},{"_id":"themes/pln/source/css/animation.scss","hash":"dbf5844a0820ed52a5682a48dbec3a31f75a9ee6","modified":1588124913082},{"_id":"themes/pln/source/css/code.scss","hash":"8a46d0ce466a2776deb073b2081b5d26abdd288c","modified":1588124913082},{"_id":"themes/pln/source/css/footer.scss","hash":"3774092f5a5f2d7359e614e517fd4d35edebc1ab","modified":1588124913082},{"_id":"themes/pln/source/css/m.min.css","hash":"09bb5bd49504c00b60830c2459efb88530219a6a","modified":1588124913082},{"_id":"themes/pln/source/css/m.min.css.map","hash":"686dbed556f1c2625b79f1b59f24bf20ba98ad60","modified":1588124913082},{"_id":"themes/pln/source/css/main.scss","hash":"e03f9eb6e89eb17d865c901fb109f4e52241850d","modified":1588124913082},{"_id":"themes/pln/source/css/navigator.scss","hash":"5d14b20de5e8a0ec5a1ee269a544a53af5c01ee1","modified":1588124913082},{"_id":"themes/pln/source/css/pager.scss","hash":"5edd0a16f2baa012fbc1d0918ca0b95b0552332f","modified":1588124913082},{"_id":"themes/pln/source/css/posts.scss","hash":"f9b767f94921b4e11c20cd253a6a36dd37ba0b3a","modified":1588124913082},{"_id":"themes/pln/source/css/search.scss","hash":"d43bb94b4453a6d59f2984524c61c0d5a6e81ee2","modified":1588124913082},{"_id":"themes/pln/source/css/toc.scss","hash":"6fef2f658bdec7da71f9137fcbf80e38f7453993","modified":1588124913082},{"_id":"themes/pln/source/js/search.js","hash":"09ac1aaacb622b3a56697e2f7eb39c7d5aa6fa25","modified":1588124913082},{"_id":"themes/pln/source/js/search.min.js","hash":"c494b0d8cc15a9e1beb6e9364775675e7f258604","modified":1588124913082},{"_id":"themes/pln/layout/_partial/post/comment.ejs","hash":"31ab5030793d8ff17acf26b29ec69bec3f52f728","modified":1588124913065},{"_id":"themes/pln/layout/_partial/post/gallery.ejs","hash":"974ad0ad1563993faa60bb7b1e5dd0f554f85d9a","modified":1588124913065},{"_id":"themes/pln/layout/_partial/post/meta.ejs","hash":"bb5017188500b6dad3059a0702ddbce872d94c25","modified":1588124913065},{"_id":"themes/pln/layout/_partial/post/title.ejs","hash":"431546c9d935dfcd2e7e22243e9c34fdf30527d2","modified":1588124913065},{"_id":"public/2020/04/29/how-to-build-your-blog/index.html","hash":"86bd292f4ac38f4c0276e53c17a4ef2ad5064db7","modified":1588139822515},{"_id":"public/2020/04/29/hello-world/index.html","hash":"6a4b9e8a027ecf10525a6bce58bc319f416d1845","modified":1588139822515},{"_id":"public/archives/index.html","hash":"c3b85e9dbef9eb1cb7833a7e0459f2f7e5681db8","modified":1588139822515},{"_id":"public/archives/2020/index.html","hash":"08794fb4b63ed64e0ec46735ea871c5323cb804b","modified":1588139822515},{"_id":"public/archives/2020/04/index.html","hash":"571b524c047946d13a1a6f6ad4d6c53af385811c","modified":1588139822515},{"_id":"public/categories/Database/index.html","hash":"0f32e0ae30cdae62bc4dcd1e294dd81255b583c4","modified":1588139822515},{"_id":"public/categories/hexo/index.html","hash":"0094f8c294a89cab0d62f6edc8e6c2953464ff1a","modified":1588139822515},{"_id":"public/index.html","hash":"31c8cdb1ae83e7a4c47a5f3eb12c3896244b1655","modified":1588139822515},{"_id":"public/tags/hexo/index.html","hash":"05b7a40fc26277ea702e03630551c2aafc12d703","modified":1588139822515},{"_id":"public/2020/04/29/Introduction-to-Database-Principle-note/index.html","hash":"10cd708763f35c1eb362c062df4398d5629a63ee","modified":1588139822515},{"_id":"public/css/animation.scss","hash":"dbf5844a0820ed52a5682a48dbec3a31f75a9ee6","modified":1588139822515},{"_id":"public/css/code.scss","hash":"8a46d0ce466a2776deb073b2081b5d26abdd288c","modified":1588139822515},{"_id":"public/css/footer.scss","hash":"3774092f5a5f2d7359e614e517fd4d35edebc1ab","modified":1588139822515},{"_id":"public/css/main.scss","hash":"e03f9eb6e89eb17d865c901fb109f4e52241850d","modified":1588139822515},{"_id":"public/css/navigator.scss","hash":"5d14b20de5e8a0ec5a1ee269a544a53af5c01ee1","modified":1588139822515},{"_id":"public/css/pager.scss","hash":"5edd0a16f2baa012fbc1d0918ca0b95b0552332f","modified":1588139822515},{"_id":"public/css/m.min.css.map","hash":"686dbed556f1c2625b79f1b59f24bf20ba98ad60","modified":1588139822515},{"_id":"public/css/posts.scss","hash":"f9b767f94921b4e11c20cd253a6a36dd37ba0b3a","modified":1588139822515},{"_id":"public/css/search.scss","hash":"d43bb94b4453a6d59f2984524c61c0d5a6e81ee2","modified":1588139822515},{"_id":"public/css/toc.scss","hash":"6fef2f658bdec7da71f9137fcbf80e38f7453993","modified":1588139822515},{"_id":"public/css/m.min.css","hash":"c809bb17d2e29af545699acba5e10a556c3a0019","modified":1588139822515},{"_id":"public/js/search.min.js","hash":"c494b0d8cc15a9e1beb6e9364775675e7f258604","modified":1588139822515},{"_id":"public/js/search.js","hash":"09ac1aaacb622b3a56697e2f7eb39c7d5aa6fa25","modified":1588139822515}],"Category":[{"name":"Database","_id":"ck9kxg1x40002ytn38k989dhz"},{"name":"hexo","_id":"ck9kxg1x70005ytn3f3fy30gb"}],"Data":[],"Page":[],"Post":[{"title":"Introduction to Database Principle note","_content":"I have recently studied the database again, so take a note\n<!--more-->\n\n# 第一章 绪论\n#### 1. **数据管理技术的发展阶段** :\n- 人工管理阶段\n- 文件系统阶段\n- 数据库阶段\n\n*其中文件阶段到数据库阶段是质的飞跃.*\n\n#### 2. **名词概念** \n- 数据 描述事务的符号被称为数据.\n- DB DataBase数据库,是长期存储在计算机内,有组织,可共享的大量数据集合.\n- DBMS 数据库管理系统.\n- DBS 数据库系统,由DB+DBMS+应用程序+数据库管理员(DBA)\n\n\n|                    | **人工管理阶段**    | **文件系统阶段**        | **数据库系统阶段**             |\n| ------------------ | ------------------- | ----------------------- | ------------------------------ |\n| *背景*             |                     |                         |                                |\n| **应用背景**       | 科学计算            | 科学计算,数据管理       | 大规模数据管理                 |\n| **硬件背景**       | 无直接存储设备      | 硬盘,磁鼓               | 大容量磁盘,磁盘阵列            |\n| **软件背景**       | 没有操作系统        | 有文件系统              | 有数据库管理系统               |\n| **处理方式**       | 批处理              | 联机实时处理,批处理     | 联机实时处理,批处理,分布处理   |\n| *特点*             |                     |                         |                                |\n| **数据管理者**     | 用户(程序员)        | 文件系统                | 数据库管理系统                 |\n| **数据面向的对象** | 应用程序            | 应用                    | 现实世界(如:一个企业)          |\n| **数据的共享程度** | 无共享,冗余度最大   | 共享性差,冗余度大       | 共享性高,冗余度小              |\n| **数据的独立性**   | 不独立,完全依赖程序 | 独立性差                | 高度物理独立性和一定逻辑独立性 |\n| **数据的结构化**   | 无结构              | 记录内有结构,整体无结构 | 整体结构化,模型描述            |\n| **数据控制能力**   | 程序控制            | 程序控制                | 数据管理系统                   |\n\n**数据模型** :对现实数据特征的抽象 (现实世界_->信息时间诶->机器世界)\n\n#### 3. 数据模型的基本概念(关系模型)\n\n| 名次       | 英文名       | 解释                                                                        |\n|------------|--------------|-----------------------------------------------------------------------------|\n| 实体       | enity        | 客观存在并可相互区别的事物                                                  |\n| 属性       | attribute    | 实体所具有的某一特性                                                        |\n| 码         | key          | 唯一标识实体的属性称为码                                                    |\n| 实体型     | entitty      | 用实体名及其属性名集合来抽象和刻画同类实体                                  |\n| 实体集     | enityset     | 同一类实体的集合                                                            |\n| 联系       | relationship | 实体内部联系常指组成实体的各属性之间的联系,之间的联系指不同实体集之间的联系 |\n| 联系的种类 |              | 一对一,一对多,多对多                                                        |\n| 关系       | relation     | 一对关系对应一张表                                                          |\n| 元组       | tuple        | 表中一行为一个元组                                                          |\n| 属性       | attitude     | 表中一列为一个属性                                                          |\n| 码         | key          | 又称码键,表中的某一个属性可以唯一确认一个元组                               |\n| 域         | domain       | 具有相同数据类型的值的集合                                                  |\n| 分量       |              | 元组中的一个属性值                                                          |\n| 关系模式   |              | 对关系的表述,一般表示为:关系名(attitude1, attitude2 ...)                    |\n\n#### 4. 数据模型分类.\n**根据应用不同,第一类是概念模型,第二类是逻辑模型和物理模型**.\n\n- **概念模型** :也称为信息模型,是按用户的观点来对数据和信息建模,主要用于数据库设计.其中一种表示方法: *实体-联系方法*又称 `E-R` 方法, 使用 `E-R` 图实现.\n- **逻辑模型** :主要包括 层次模型 网状模型 关系模型,另外还有 面象对象数据模型 对象关系模型 半结构化模型 等,是按计算机系统的观点对数据建模,主要用于数据库管理系统的实现.\n- **物理模型** :是对数据最底层的抽象,它描述数据在系统内部的表示方式和存储方法,或在磁盘或磁带上的存储方式和存取方法,是面向计算机的.\n\n**层次模型** \n\n    定义:\n        1. 有且只有一个节点没有双亲节点 \n        2. 根以外其他节点有且只有一个双亲节点 \n    优点:\n        1. 数据结构较清晰 \n        2. 查询效率高 \n        3. 提供了良好的完整性支持   \n    缺点:\n        1. 现实世界大多不是层次关系 \n        2. 查询子女节点必须通过双亲节点 \n        3. 结构过于严密,层次命令趋于程序化 \n\n\n**网状模型**\n\n    定义:\n        1. 允许一个以上的节点无双亲节点 \n        2. 一个节点可有多于一个的双亲节点    \n    优点:\n        1. 更直接的描述世界 \n        2. 具有良好的性能,存取效率高  \n    缺点:\n        1. 结构较复杂 \n        2. 需要嵌入高级语言,用户不易掌握,不易使用 \n        3. 记录之间的联系通过存取路径实现,因此用户必须了解系统结构的细节 \n\n\n**关系模型**\n\n    定义:\n        要求关系必须是规范化的,即每一个分量不可再分    \n    优点:\n        1. 建立在严格的数学概念上 \n        2. 概念单一,数据结构简单,清晰 \n        3. 存取路径对用户透明,数据的独立性,安全保密性更好 \n    缺点:\n        查询效率低,需要优化  \n\n#### 5. 数据模型\n**组成要素: `数据结构`+`数据操作`+`数据完整行约束条件`**\n\n- 数据结构: 描述数据库的组成对象及对象之间的联系.\n- 数据操作: 指对数据库中各种对象的实例(值)允许执行的操作的集合,包括操作及有关的操作规则.\n- 完整性约束条件: 是一组完整性规则.\n\n#### 6. 三级结构模式\n**数据库的体系结构分为三级: `内部级`, `概念级`和`外部级`.**\n\n- 模式(概念级): 是数据库中全体数据的逻辑结构和特征的描述,是所有用户的公共数据视图.\n- 外模式(外部级): 能够看见和使用的局部数据的逻辑结构和特征的描述,是数据库用户的数据视图.\n- 内模式(内部级): 也称为存储模式,一个数据库只有一个内模式,最接近物理存储,涉及到实际数据存储的结构,是数据在数据库内部的组织方式.\n\n#### 7. 两层映像 \n(**保证了数据库系统中的数据能够具有较高的逻辑独立性和物理独立性**)\n- 模式/内模式映像: 用于定义概念模式和内模式之间的对应性.一般在内模式中描述.\n- 外模式/模式映像: 用于定义外模式和概念模式之间的对应性.一般在外模式中描述.\n\n#### 8. 两级数据独立性\n- 物理数据独立性:修改内模式时尽量不影响概念模式及外模式,则达到物理数据独立性.\n- 逻辑数据独立性: 修改概念模式时尽量不影响外模式和应用程序.\n\n#### 9. 硬件平台及数据库\n- 要足够大的内存\n- 足够大的磁盘或磁盘阵列等设备存放数据库,作数据备份\n- 系统有较高的通道能力,以提高数据传送效率\n\n#### 10. 软件\n- DBMS\n- 支持DBMS的OS\n- 相应的高级语言操作数据库\n- 以DBMS为核心的开发工具\n\n#### 12. 人员\n- DMA:\n    1. 决定数据库的信息内容和结构.\n    2. 决定数据库的存储结构和存取策略.\n    3. 定义数据的安全性要求和完整约束条件.\n    4. 监控数据库的运行和使用.\n    5. 数据库的改进和重构.\n- 系统分析员和数据库设计人员\n- 应用程序人员\n\n# 第二章 \n## 一.关系模型\n>可形式化表示为 `R(U, D, DOM, F)`<br>\n`R` 为关系名，`U` 为属性名集合，`D` 为 `U` 中属性所来自的域<br>\n`DOM` 为属性向域的映像集合，`F` 为属性间数据的依赖关系集合<br>\n关系模型只包含单一的数据结构——关系（是笛卡尔积的有限子集）<br>\n用户看来其中的数据逻辑结构是一张扁平的二维表<br>\n\n#### 1. 码\n **由一个或几个属性组成**\n- 候选码: 可以唯一标识每一组的属性组\n- 主码: 用户选做元组标识的一个候选键位主键\n- 外码: 某个关系的主码相应的属性在另一关系中出现,此时主键就是另一个关系的外码\n\n#### 2. 三种关系类型\n1. 基本关系(或基表,是实际存在的表,实际存储数据的逻辑表示),\n1. 查询表(是查询结果对应的表),\n1. 视图表(是由基本表或其他试图表导出,是虚表).\n\n#### 3. 基本关系的六条性质\n1. 列是同质的\n1. 不同列可出自同一域\n1. 列的顺序无所谓\n1. 行的顺序无所谓\n1. 任意两个元组的候选码不能同值\n1. 分量必须是原子值,即每一个分量都是比不可分的\n\n## 二.关系完整性\n>关系模型有三类: `实体完整性`, `参照完整性`, `用户定义完整性`.前两个必须满足,称为关系的两个不变性.\n\n- 实体完整性规则: 要求关系中组成主码的属性不能有空值\n- 参照完整性规则: 要求不引用不存在的实体,但可以空值\n- 用户自定义完整性规则: 有具体应用环境决定,系统提供定义和检验这类完整性的机制\n\n## 三.关系代数\n>一种抽象的查询语言,是对关系运算来表达查询\n\n| 符号 | ∪  | ∩  | -  | ×        | σ    | Π    | ⋈    | ÷  |\n|------|----|----|----|----------|------|------|------|----|\n| 含义 | 并 | 交 | 差 | 迪卡尔积 | 选择 | 投影 | 连接 | 除 |\n\n*注:前四个`集合运算`, 后四个`关系运算`*\n\n## 四.关系数据库标准语言SQL\n### 1. SQL特点\n- 综合统一\n- 高度非过程化\n- 面向集合的操作方式\n- 以同一中语法结构提供多种使用方式\n- 语言简单,易学易用\n\n### 2. 数据定义: `模型定义`,`表定义`,`视图`,`索引`\n- 创建模式\n\n    ```sql\n    CREATE SCHEMA <模式名> AUTHORIZATION <用户名> [<表定义>|<视图定义>|<授权定义>];\n    ```\n\n- 删除模式\n\n    ```sql\n    DROP SCHEMA <模式名> <CASCADE | RESTRICT>;\n    ```\n\n- 创建表\n\n    ```sql\n    CREATE TABLE <表名> (<列名><数据类型> [列级完整性约束条件]\n    [, <列名><数据类型> [列级完整性约束条件]]\n    ...\n    [, <表级完整性约束条件>]\n    );\n    ```\n\n- 删除表\n\n    ```sql\n    DROP TABLE <表名> <CASCADE | RESTRICT>;\n    ```\n\n- 修改表\n\n    ```sql\n    ALTER TABLE <表名>\n    [ADD [COLUMN] <新列名> <数据类型> [完整性约束]]\n    [ADD <表级完整性约束>]\n    [DROP [COLUMN] <列名> [CASCADE | RESTRICT] ]\n    [DROP CONSTRAINT <完整性约束名> [RESTRICT | CASCADE] ]\n    [ALTER COLUMN <列名> <数据类型>]\n    ;\n    ```\n\n- 创建索引\n\n    ```sql\n    CREATE [UNIQUE] [CLUSTER] INDEX <索引名>\n    ON <表名>( <列名> [<次序>]  [, <列名> [<次序>]] ... );\n    ```\n\n- 修改索引\n\n    ```sql\n    ALTER INDEX <旧索引名> RENAME TO <新索引名>;\n    ```\n\n- 删除索引\n\n    ```sql\n    DROP INDEX <索引名>;\n    ```\n### 3. 数据查询\n```sql\nSELECT [ALL | DISTINCT] <目标列表达式> [, <目标列表达式>] ...\n    FROM <表名|视图名> [, <表名|视图名> ...] | (<SELECT语句>) [AS] <别名>\n    [WHERE <条件表达式>]\n    [GROUP BY <列名1> [HAVING <条件表达式>]]\n    [ORDER BY <列名2> [ASC|DESC]]\n    ;\n```\n\n| **查询条件**   | **谓词**                                  |\n| -------------- | -----------------------------             |\n| 比较           | `=` `>` `<` `>=` `<=` `!=` `<>` `!>` `!<` |\n| 确定范围       | `BETWEEN AND` `NOT BETWEEN AND`           |\n| 确定集合       | `IN` `NOT IN`                             |\n| 字符匹配       | `LIKE` `NOT LIKE`                         |\n| 空值           | `IS NULL` `IS NOT NULL`                   |\n| 逻辑运算       | `AND` `OR` `NOT`                          |\n\n**聚集函数**\n\n| **函数名**                       | **含义**             |\n| -------------------------------- | -------------------- |\n| `COUNT(*)`                       | 统计元组个数         |\n| `COUNT( [DISTINCT/ALL] <列名> )` | 统计一列中值的个数   |\n| `SUM( [DISTINCT/ALL] <列名> )`   | 计算一列值的总和     |\n| `AVG( [DISTINCT/ALL] <列名> )`   | 计算一列值的平均值   |\n| `MAX( [DISTINCT/ALL] <列名> )`   | 求一列的最大值       |\n| `MIN( [DISTINCT/ALL] <列名> )`   | 求一列的最小值       |\n\n**GROUP BY 子句**\n\n将查询结果按某一列或多列的值分组,值相等的为一组\n>(分组后聚集函数将作用于每一个组,即每一个组都有一个函数值)\n\n### 4. 数据更新\n- 插入元组\n\n    ```sql\n    INSERT INTO <表名> [(<属性列1> [,<属性列2>] ...)]\n    VALUES(<常量1> [,<常量2>] ...);\n    ```\n\n- 插入子查询结构\n\n    ```sql\n    INSERT INTO <表名> [(<属性列1> [, <属性列2>] ...)]\n    子查询;\n    ```\n\n- 修改数据\n\n    ```sql\n    UPDATE <表名> SET <列名>=<表达式> [,<列名>=<表达式>] ...\n    [WHERE <条件>];\n    ```\n\n- 删除数据\n\n    ```sql\n    DELETE\n    FROM <表名>\n    [WHERE <条件>]\n    ;\n    ```\n\n### 5. 视图\n- 创建视图\n\n    ```sql\n    CREATE VIEW <视图名> [(<列名> [,<列名>] ...)]\n    AS <子查询>\n    [WITH CHECK OPTION]\n    ;\n    ```\n\n- 删除视图\n\n    ```sql\n    DROP VIEW <视图名> [CASCADE];\n    ```\n\n- 更新视图: 对视图的查询和基本表相同,但是更新操作受到以下三条规则限制\n    - 如果试图从多个基本表使用联合操作导出,则不允许更新\n    - 如果导出的视图使用了分组和聚合操作,也不允许更新\n    - 如果视图从单个基本表使用选择和投影导出,并包括了主码或某个候选码,则可以操作\n\n### 6. 数据安全性\n>数据安全性是指保护数据库以防止不合法使用所造成的数据泄漏,更改或破坏\n\n#### I. 数据的不安全因素\n- 非授权用户对数据库的恶意存取和破坏\n- 数据库中重要或敏感的数据被泄漏\n- 安全环境的脆弱性\n\n#### II. 实现数据库系统安全的技术和方法\n有多种,最重要的是`存取控制技术`和`审计技术`,目前许多大型DBMS达到的**C2**级,其安全版本达到**B1**.\n\n**C2**级的DBMS必须具有自主存取控制功能和审计功能,**B1**级的必须具有强制存取控制功能和增强的审计功能.\n\n自主存取控制功能一般是通过**SQL**的`GRANT`语句和`REVOKE`语句来实现.\n\n#### III. 常用存取控制方法\n- 自主存取控制 (Discretionary Access Control,DAC)\n\n    同一用户对于不同的数据对象有不同的存取权限,不同用户对同一对象也不同权限,用户还可以将其拥有的存取权限转授其他用户\n- 强制存取控制 (Mandatory Access Control,MAC)\n\n    每一个数据对象被标记一定的密级,每一个用户也被授予某一个级别的许可证,对于任意一个对象,只有具有合法许可证的用户才可以存取\n\n### 7. 数据完整性\n#### I. 维护数据库的完整性,DBMS必须实现:\n- 提供定义完整性约束条件的机制\n- 提供完整性检查的方法\n- 进行违约处理\n\n#### II. 实体完整性检查和违约处理:\n>在列级,表级定义主码后,每更新一次,DBMS将自动检查(有全表扫描,B+树索引)\n- 检查主码值是否唯一,如果不唯一则拒绝插入或修改\n- 检查主码的各个属性是否为空值,只有一个空值就拒绝插入或修改\n\n#### III. 参照完整性\n>用`FOREIGN KEY`短语定义哪些列为外码<br>\n用`reference`指明这些外码参照哪些表的主码,参照完整性检查和违约处理\n\n| 被参照表           | 参照表             | 违约处理                 |\n|--------------------|--------------------|--------------------------|\n| 可能破坏参照完整性 | 插入元组           | 拒绝                     |\n| 可能破坏参照完整性 | 修改外码值         | 拒绝                     |\n| 删除元组           | 可能破坏参照完整性 | 拒绝/联级删除/设置为空值 |\n| 修改主码值         | 可能破坏参照完整性 | 拒绝/联级操作/设置为空值 |\n\n*备注:拒绝(NO ACTION),联级(CASCADE)*\n\n#### IV. 用户定义完整性\n- 属性上约束条件的定义: 包括列值非空(`NOT NULL`),列值唯一(`UNIQUE`),检查列值是否满足一个条件表达式(CKECK sentence)\n\n    属性上约束条件的检查和违约处理: 当往表中插入元组或修改属性的值时,DBMS将检查属性上的约束条件是否被满足,不满足拒绝执行.\n\n- 元组上约束条件的定义: 与属性上类似,用CHECK定义元组上的约束条件,即元组级限制(可设置不同属性之间的相互约束条件)\n\n    元组上约束条件的检查和违约处理: 当往表中插入元组或修改属性的值时,DBMS将检查元组的约束条件是否被满足,不满足拒绝执行.\n\n#### V. 完整性约束命名句子\n- 完整性约束命名句子\n```sql\nCONSTRAINT <完整性约束条件命名> <完整约束条件>\n   # 完整性约束条件包括: NOT NULL, UNIQUE, PRIMARY KEY, FOREEIGN KEY, CHAECK 短语等\n```\n- 修改完整性约束条件: 使用`ALTER TABLE sentence`\n\n#### VI. 断言\n通过声明性断言(declarative assertions)来制定更具有一般性的约束,可以定义设计多个表或聚集操作的比较复杂的完整性思想,断言创建后任何涉及关系的操作都会触发DBMS对断言的检查.\n\n```sql\n#创建断言\nCREATE ASSERTION <断言名> <CHECK 子句>\n#删除断言\nDROP ASSERTION <断言名>\n```\n#### VII. 触发器\n触发器又叫做事件-条件-动作(event-condition-action)规则, 是用户定义在关系表上的一类由事件驱动的特殊过程, 当特定的系统事件(如表的增删改查操作,事物的结束)发生时,对规则的条件进行检查,若成立则执行\n\n- 定义触发器\n\n    ```sql\n    CREATE TRIGGER <触发器名>  #每当触发事件发生时,该触发器被激活\n        {BEFORE|AFTER} <触发事件> ON <表名> #指明触发器激活时是在触发器事件前或后\n        REFERENCING NEW | OLD ROW AS <变量>  #REFERENCING 指出引用的变量\n        FOR EACH {ROW|STATEMENT}  #定义触发器的类型,指明动作体的频率\n        [WHEN <触发器条件>] <触发动作体>  #仅当触发条件为真时才执行触发动作体\n    ```\n\n- 激活触发器: 发器的执行是由触发事件激活并由数据库服务器自动执行, 激活应遵循如下执行顺序\n    1. 执行该表上的BEFORE触发器\n    1. 激活触发器的SQL语句\n    1. 执行该表上的AFTER触发器\n\n- 删除触发器\n\n    ```sql\n    DROP TRIGGER <触发器名> ON <表名>;\n    ```\n\n# 第六章 关系数据理论\n\n(一个好的关系模式应当不会发生`插入异常`,`删除异常`和`更新异常`,数据冗余应尽可能少.)\n\n- 数据依赖是一个关系内部属性与属性之间的约束关系,这种关系是通过属性之间的相等与否体现出来的数据相关联系;其中最重要的是 `函数依赖` 和 `多值依赖`\n- 规范化: 一个低一级范式的关系模式通过模式分解可以转换为若干个高一级范式的关系模型的集合,这个过程就是规范化.\n\n    - 1NF: 第一范式.每一个分量必须不可再分的数据项.\n\n        *缺点: 数据冗余,插入异常,删除异常,更新异常*\n    - 2NF: 第二范式.首先属于 `1NF`,且每一个非主属性完全函数依赖与任何一个候选码.\n\n        *缺点: 插入异常,删除异常,修改复杂*\n    - 3NF: 第三范式.首先属于 `2NF`,且不存在依赖传递.\n\n        *并不能完全消除各种异常情况和数据冗余*\n    - BCNF: 修正第三范式.基本消除了任何属性对码的依赖传递和部分依赖.性质:\n\n        1. 所有非主属性对每一个码都是完全依赖关系\n        2. 所有主属性对每一个不包含它的码也是完全函数依赖\n        3. 没有任何属性完全函数依赖于非码的任何一组属性\n\n    - 4NF: 第四范式.不允许有非平凡且非函数依赖的多值依赖,允许的非平凡多值依赖的函数依赖\n\n![fanshi](http://dl.iteye.com/upload/attachment/318920/fa4fcfba-7888-310d-bd10-a736ef1ac97d.gif)\n\n## 数据依赖的公理系统\n#### 1. Armstrong公理系统\nArmstrong是一个有效且完备的公理系统, 公理系统是模式分解算法的理论基础\n\n设 U 为属性集总体: F是U上的一组函数依赖,于是有关系模型R<U,F>.对于R<U,F>来说有以下推理规则:\n- 自反律: 若Y⊆X⊆U,则X->Y为F所蕴含\n- 增广律: 若X->Y为F所蕴含,且Z⊆U, 则XZ->YZ为F所蕴含\n- 传递律: 若X->Y及Y->Z为F所蕴含,则X->Z为F所蕴含\n\n推导:\n- 合并规则:由X->Y, X->Z,有X->YZ\n- 伪传递规则:由X->Y, WY->Z,有XW->Z\n- 分解规则:由X->Y及Z⊆Y,有X->Z\n\n#### 2. 闭包F+\n在关系模式R<U,F>中为F所逻辑蕴含的函数依赖的全体叫作F的闭包,即为F+.\n\n#### 3. X关于函数依赖集F的闭包XF+\n定义:设$F$为属性集$U$上的一组函数依赖, $X⊆U$,$X_{F^+}=\\{A|X->A能由F根据Armstrong公理导出\\}$,$X_{F^+}$称为属性集X关于函数依赖集F的闭包\n\n#### 4. 最小依赖集\n又称最小覆盖,满足以下条件:\n- F中任一函数依赖的右部只含有一个属性\n- F中不存在这样的函数依赖X->A,使得F与F-{X->A}等价\n- F中不存在这样的函数依赖X->A,X有真子集Z使得F-{X->A}∪{Z->A}与F等价\n\n## 模式分解定义\n**分解具有: 无损连接性, 保持函数依赖, 既要保持函数依赖又要具有无损连接性** \n\n#### 1. 关于模式分解的重要事实:\n- 若要求分解保持函数依赖,那一定可以达到3NF,不一定达到BCNF\n- 若要求分解保持函数依赖,又具有无损连接性,可以达到3NF,不一定达到BCNF\n- 若要求分解具有无损连接性,那一定可以达到4NF\n\n#### 2. 损连接性分解\n**分解后的关系自然连接,完全等于分解前的关系,则这个分解相对于F是无损连接分解.**\n\n判断分解无损连接性的算法:\n- 表格法\n- 设R的分解为ρ={R1,R2},F为R所满足的函数依赖集，则分解ρ具有无损联接性的充分必要条件是：R1∩R2→(R1-R2) 或者 R1∩R2→(R2-R1)\n\n#### 3. 保持函数依赖的分解\n`Let F' = F1U … FiU .. UFn` , 若`F`与`F'`等价，即`F'+ = F+` ，则保持函数依赖。\n\n判断方法：`F`所有原函数依赖可以由`F'`的函数依赖逻辑导出\n\n# 第七章 数据库设计概述\n#### 1. 数据库应用系统的开发也是一项软件工程,称为数据库工程.\n\n数据库应用系统也有生存期的概念,通常包括六个阶段:\n- 需求分析阶段: 需求收集,分析,处理->DD(数据字典)和DFD(数据流图)\n- 概念设计阶段: 设计概念结构->E-R图\n- 逻辑设计阶段: 设计逻辑结构和数据模型\n- 物理设计阶段: 关系模式存取方法(B+树,hash索引,聚簇存取),设计物理文件存储结构\n- 实现阶段: 物理实现,实验性运行\n- 运行维护阶段: 使用,维护数据库\n\n#### 2. 概念设计的主要步骤:\n1. 机型数据抽象,设计局部概念模式\n2. 将局部概念模式综合成全局概念模式\n3. 评审\n\n#### 3. 采用E-R法进行数据库概念设计分三步:\n1. 首先设计局部E-R模式\n2. 然后把各局部E-R模式综合成全局E-R模式\n3. 最后对全局E-R模式进行优化\n\n#### 4. 逻辑结构设计: 把E-R图转换为与选用DBMS支持的数据模型相符合的逻辑结构\n\n#### 5. 数据模型优化:其结果不唯一,方法为:\n1. 确定数据依赖\n2. 消除冗余关系\n3. 确定关系模式处于第几范式\n4. 根据需求分析确定哪种模式适合应用环境(并非范式化越高越优)\n\n#### 6. E-R图向关系转化的原则:\n- 一个实体型转换为一个关系模式.(属性, 码)\n- 1:1联系可转为独立关系模式,也可与其一合并.(若合并,联系的属性也一同合并)\n- 1:n联系可转为独立关系模式,也可与n端合并.(若合并,联系的属性也一同合并)\n- 三个或三个以上实体间的多元联系应转为一个关系模式.\n- 具有相同码的关系可合并\n\n# 第八章 SQL编程\n主语言为C,其格式为 `EXEC SQL <SQL语句>`\n\n主语言为Java,其格式为 `# SQL {<SQL语句>}`\n\n建立嵌入式SQL的连接语法: `EXEC SQL CONNECT TO target [AS connect-name][USERT user-name]` (备注:target是要连接的数据库服务器)\n\n#### 1. 存储过程\n1. 创建存储过程:\n\n```sql\nCREATE SQL REPLACE PROCEDURE 过程名 ([参数1,参数2,...])\n    AS <过程化SQL块>;\n```\n\n2. 执行存储过程:\n\n```sql\nCALL/PERFORM PROCEDURE 过程名 ([参数1,参数2,...]);\n```\n\n3. 修改存储过程:\n\n```sql\nALTER PROCEDURE 过程名1 RENAME TO 过程名2;\n```\n4. 删除存储过程:\n\n```sql\nDROP PROCEDURE 过程名;\n```\n\n#### 2. ODBC: 由用户应用程序+ODBC驱动程序管理器+数据库驱动程序+数据源构成\n- 其工作流程:\n- 配置数据源\n- 初始化环境\n- 建立连接\n- 分配语句句柄\n- 执行SQL语句\n- 结果处理集\n- 终止处理\n\n# 第九章 查询优化\n步骤为:\n\n- 查询分析:语法,词法\n- 查询检查:语义,权限,安全性检查\n- 查询优化:代数优化,物理优化\n- 查询执行:代码生成\n\n查询优化的目的就是为了系统在执行时既省时间又能提高效率，在关系代数运算中，通常是先进行笛卡尔积或联接运算，再进行选择和投影，恰当地安排选择、投影和联接的顺序，就可实现查询优化。优化的策略主要有以下几点：\n- 在关系代数表达式中尽可能早地执行选择操作(早做选择).\n- 把笛卡尔积和随后的选择操作合并成连接运算 (尽可能做自然连接或等值连接，不做笛卡尔积).\n- 同时计算一连串的选择和投影操作，使操作对象尽可能变小。\n- 连接多个对象时，先做连接结果小的连接。\n- 计算表达式之前先估计一下怎么计算合算\n\n# 第十章 数据库恢复技术\n##### 1. 事务是数据库的逻辑工作单位，其特点:原子性、一致性、隔离性和持续性\n定义事务的语句一般有三条:`BEGIN TRANSATION`; `COMMIT`; `ROLLBACK`;\n1. 事务开始通常由BEGIN TRANSACTION, COMMIT或ROLLBACK结束,\n\n2. commit提交事务的所有操作,\n\n3. rollback表示回滚,即事务运行中发生了故障,系统将事务中对数据库的所有已完成的操作全部撤销,回滚到事务开始的状态\n\n#### 2. 故障类型: \n事物故障,系统故障和介质故障\n\n#### 3. 恢复中最常用的技术:\n数据库转储,登记日志文件\n\n#### 4. 恢复的基本原理:\n利用存储的备份副本,日志文件或数据库镜像中冗余的数据来重建数据库\n\n#### 5. 常用恢复技术:\n- 事物故障的回复:UNDO\n- 系统故障的恢复:未提交的事物做UNDO,以提交的做REDO\n- 介质事物的恢复:重装备份并恢复到一致性状态+REDO\n\n#### 6. 提高恢复效率的技术\n检查点技术\n- 可以提高系统故障的恢复效率\n- 可以在一定程度上提高利用动态转储备份进行介质故障恢复的效率\n\n镜像技术\n- 镜像技术可以改善介质故障的恢复效率\n\n# 第十一章 并发控制\n#### 1. 数据库的并发控制以事务为单位,每一时刻只有一个事务在运行(在单处理机系统中,事务的并行执行实际上是并行操作轮流交叉运行)\n\n#### 2. 数据库的并发控制通常使用封锁机制(也有时间戳,乐观控制法,多本并发控制等其他方法), 其基本类型有两种排他锁(又称写锁, X锁)和共享锁(又称读锁, S锁)\n\n| 横向为事务T1,纵向为事务T2   | X | S | - |\n|-----------------------------|---|---|---|\n| X                           | N | N | Y |\n| S                           | N | Y | Y |\n| --------------------------- | Y | Y | Y |\n| 备注:Y相容请求,N不相容请求  |   |   |   |\n\n#### 3. 常用的封锁协议\n不同级别的封锁协议提供不同的数据一致性保证,提供不同的数据共享度.\n\n| 名称 | 定义                                                          | 优点                             | 缺点                       |\n|------|---------------------------------------------------------------|----------------------------------|----------------------------|\n| 一级 | 事务T在修改数据R前必须先加X锁,直到事务结束才释放              | 可以防止丢失修改并保证事务可恢复 | 不保证可重复读和不读脏数据 |\n| 二级 | 在一级基础上,增加事务T在读取数据R前必须加S锁,读完后立即释放   | 可防止丢失修改和读脏数据         | 不保证可重复读             |\n| 三级 | 在一级基础上,增加事务T读取数据R前必须加S锁,直到事务结束才释放 | 可防止丢失修改和读脏数据         | -                          |\n\n#### 4. 并发控制机制调度并发事务操作是否正确的判别准则是可串行性\n- 并发操作的正确准则性通常由两段锁协议保证(2PL)\n\n    - 获得封锁,在对任何数据读写之前要申请并获取对该数据的封锁\n    - 释放封锁,释放封锁之后,事务不再申请和获得任何其他锁\n\n- 两段锁协议是可串行化调度的充分条件,但不是并要条件\n\n#### 5. 对象数据施加封锁,带来问题\n- 活锁:解决额方法,先来先服务\n- 死锁:预防方法,一次封锁法,顺序封锁法\n\n#### 6. 死锁的诊断与解除: \n超时法和等待图法\n\n#### 7. 封锁粒度:\n封锁的粒度越大->数据库能封锁的数据单元越少,并发度越小,系统开销越小;粒度越小,则相反.\n\n多粒度封锁分为:\n- 显式封锁:直接加到数据对象上的封锁\n- 隐式封锁:由于其上级结点加锁而使该数据对象加锁\n\n#### 8. 意向锁(intention lock)\n- 目的:提高对某个数据对象加锁时系统的检查效率\n- IS, IX, SIX锁\n","source":"_posts/Introduction-to-Database-Principle-note.md","raw":"title: Introduction to Database Principle note\ncategory: Database\n\n---\nI have recently studied the database again, so take a note\n<!--more-->\n\n# 第一章 绪论\n#### 1. **数据管理技术的发展阶段** :\n- 人工管理阶段\n- 文件系统阶段\n- 数据库阶段\n\n*其中文件阶段到数据库阶段是质的飞跃.*\n\n#### 2. **名词概念** \n- 数据 描述事务的符号被称为数据.\n- DB DataBase数据库,是长期存储在计算机内,有组织,可共享的大量数据集合.\n- DBMS 数据库管理系统.\n- DBS 数据库系统,由DB+DBMS+应用程序+数据库管理员(DBA)\n\n\n|                    | **人工管理阶段**    | **文件系统阶段**        | **数据库系统阶段**             |\n| ------------------ | ------------------- | ----------------------- | ------------------------------ |\n| *背景*             |                     |                         |                                |\n| **应用背景**       | 科学计算            | 科学计算,数据管理       | 大规模数据管理                 |\n| **硬件背景**       | 无直接存储设备      | 硬盘,磁鼓               | 大容量磁盘,磁盘阵列            |\n| **软件背景**       | 没有操作系统        | 有文件系统              | 有数据库管理系统               |\n| **处理方式**       | 批处理              | 联机实时处理,批处理     | 联机实时处理,批处理,分布处理   |\n| *特点*             |                     |                         |                                |\n| **数据管理者**     | 用户(程序员)        | 文件系统                | 数据库管理系统                 |\n| **数据面向的对象** | 应用程序            | 应用                    | 现实世界(如:一个企业)          |\n| **数据的共享程度** | 无共享,冗余度最大   | 共享性差,冗余度大       | 共享性高,冗余度小              |\n| **数据的独立性**   | 不独立,完全依赖程序 | 独立性差                | 高度物理独立性和一定逻辑独立性 |\n| **数据的结构化**   | 无结构              | 记录内有结构,整体无结构 | 整体结构化,模型描述            |\n| **数据控制能力**   | 程序控制            | 程序控制                | 数据管理系统                   |\n\n**数据模型** :对现实数据特征的抽象 (现实世界_->信息时间诶->机器世界)\n\n#### 3. 数据模型的基本概念(关系模型)\n\n| 名次       | 英文名       | 解释                                                                        |\n|------------|--------------|-----------------------------------------------------------------------------|\n| 实体       | enity        | 客观存在并可相互区别的事物                                                  |\n| 属性       | attribute    | 实体所具有的某一特性                                                        |\n| 码         | key          | 唯一标识实体的属性称为码                                                    |\n| 实体型     | entitty      | 用实体名及其属性名集合来抽象和刻画同类实体                                  |\n| 实体集     | enityset     | 同一类实体的集合                                                            |\n| 联系       | relationship | 实体内部联系常指组成实体的各属性之间的联系,之间的联系指不同实体集之间的联系 |\n| 联系的种类 |              | 一对一,一对多,多对多                                                        |\n| 关系       | relation     | 一对关系对应一张表                                                          |\n| 元组       | tuple        | 表中一行为一个元组                                                          |\n| 属性       | attitude     | 表中一列为一个属性                                                          |\n| 码         | key          | 又称码键,表中的某一个属性可以唯一确认一个元组                               |\n| 域         | domain       | 具有相同数据类型的值的集合                                                  |\n| 分量       |              | 元组中的一个属性值                                                          |\n| 关系模式   |              | 对关系的表述,一般表示为:关系名(attitude1, attitude2 ...)                    |\n\n#### 4. 数据模型分类.\n**根据应用不同,第一类是概念模型,第二类是逻辑模型和物理模型**.\n\n- **概念模型** :也称为信息模型,是按用户的观点来对数据和信息建模,主要用于数据库设计.其中一种表示方法: *实体-联系方法*又称 `E-R` 方法, 使用 `E-R` 图实现.\n- **逻辑模型** :主要包括 层次模型 网状模型 关系模型,另外还有 面象对象数据模型 对象关系模型 半结构化模型 等,是按计算机系统的观点对数据建模,主要用于数据库管理系统的实现.\n- **物理模型** :是对数据最底层的抽象,它描述数据在系统内部的表示方式和存储方法,或在磁盘或磁带上的存储方式和存取方法,是面向计算机的.\n\n**层次模型** \n\n    定义:\n        1. 有且只有一个节点没有双亲节点 \n        2. 根以外其他节点有且只有一个双亲节点 \n    优点:\n        1. 数据结构较清晰 \n        2. 查询效率高 \n        3. 提供了良好的完整性支持   \n    缺点:\n        1. 现实世界大多不是层次关系 \n        2. 查询子女节点必须通过双亲节点 \n        3. 结构过于严密,层次命令趋于程序化 \n\n\n**网状模型**\n\n    定义:\n        1. 允许一个以上的节点无双亲节点 \n        2. 一个节点可有多于一个的双亲节点    \n    优点:\n        1. 更直接的描述世界 \n        2. 具有良好的性能,存取效率高  \n    缺点:\n        1. 结构较复杂 \n        2. 需要嵌入高级语言,用户不易掌握,不易使用 \n        3. 记录之间的联系通过存取路径实现,因此用户必须了解系统结构的细节 \n\n\n**关系模型**\n\n    定义:\n        要求关系必须是规范化的,即每一个分量不可再分    \n    优点:\n        1. 建立在严格的数学概念上 \n        2. 概念单一,数据结构简单,清晰 \n        3. 存取路径对用户透明,数据的独立性,安全保密性更好 \n    缺点:\n        查询效率低,需要优化  \n\n#### 5. 数据模型\n**组成要素: `数据结构`+`数据操作`+`数据完整行约束条件`**\n\n- 数据结构: 描述数据库的组成对象及对象之间的联系.\n- 数据操作: 指对数据库中各种对象的实例(值)允许执行的操作的集合,包括操作及有关的操作规则.\n- 完整性约束条件: 是一组完整性规则.\n\n#### 6. 三级结构模式\n**数据库的体系结构分为三级: `内部级`, `概念级`和`外部级`.**\n\n- 模式(概念级): 是数据库中全体数据的逻辑结构和特征的描述,是所有用户的公共数据视图.\n- 外模式(外部级): 能够看见和使用的局部数据的逻辑结构和特征的描述,是数据库用户的数据视图.\n- 内模式(内部级): 也称为存储模式,一个数据库只有一个内模式,最接近物理存储,涉及到实际数据存储的结构,是数据在数据库内部的组织方式.\n\n#### 7. 两层映像 \n(**保证了数据库系统中的数据能够具有较高的逻辑独立性和物理独立性**)\n- 模式/内模式映像: 用于定义概念模式和内模式之间的对应性.一般在内模式中描述.\n- 外模式/模式映像: 用于定义外模式和概念模式之间的对应性.一般在外模式中描述.\n\n#### 8. 两级数据独立性\n- 物理数据独立性:修改内模式时尽量不影响概念模式及外模式,则达到物理数据独立性.\n- 逻辑数据独立性: 修改概念模式时尽量不影响外模式和应用程序.\n\n#### 9. 硬件平台及数据库\n- 要足够大的内存\n- 足够大的磁盘或磁盘阵列等设备存放数据库,作数据备份\n- 系统有较高的通道能力,以提高数据传送效率\n\n#### 10. 软件\n- DBMS\n- 支持DBMS的OS\n- 相应的高级语言操作数据库\n- 以DBMS为核心的开发工具\n\n#### 12. 人员\n- DMA:\n    1. 决定数据库的信息内容和结构.\n    2. 决定数据库的存储结构和存取策略.\n    3. 定义数据的安全性要求和完整约束条件.\n    4. 监控数据库的运行和使用.\n    5. 数据库的改进和重构.\n- 系统分析员和数据库设计人员\n- 应用程序人员\n\n# 第二章 \n## 一.关系模型\n>可形式化表示为 `R(U, D, DOM, F)`<br>\n`R` 为关系名，`U` 为属性名集合，`D` 为 `U` 中属性所来自的域<br>\n`DOM` 为属性向域的映像集合，`F` 为属性间数据的依赖关系集合<br>\n关系模型只包含单一的数据结构——关系（是笛卡尔积的有限子集）<br>\n用户看来其中的数据逻辑结构是一张扁平的二维表<br>\n\n#### 1. 码\n **由一个或几个属性组成**\n- 候选码: 可以唯一标识每一组的属性组\n- 主码: 用户选做元组标识的一个候选键位主键\n- 外码: 某个关系的主码相应的属性在另一关系中出现,此时主键就是另一个关系的外码\n\n#### 2. 三种关系类型\n1. 基本关系(或基表,是实际存在的表,实际存储数据的逻辑表示),\n1. 查询表(是查询结果对应的表),\n1. 视图表(是由基本表或其他试图表导出,是虚表).\n\n#### 3. 基本关系的六条性质\n1. 列是同质的\n1. 不同列可出自同一域\n1. 列的顺序无所谓\n1. 行的顺序无所谓\n1. 任意两个元组的候选码不能同值\n1. 分量必须是原子值,即每一个分量都是比不可分的\n\n## 二.关系完整性\n>关系模型有三类: `实体完整性`, `参照完整性`, `用户定义完整性`.前两个必须满足,称为关系的两个不变性.\n\n- 实体完整性规则: 要求关系中组成主码的属性不能有空值\n- 参照完整性规则: 要求不引用不存在的实体,但可以空值\n- 用户自定义完整性规则: 有具体应用环境决定,系统提供定义和检验这类完整性的机制\n\n## 三.关系代数\n>一种抽象的查询语言,是对关系运算来表达查询\n\n| 符号 | ∪  | ∩  | -  | ×        | σ    | Π    | ⋈    | ÷  |\n|------|----|----|----|----------|------|------|------|----|\n| 含义 | 并 | 交 | 差 | 迪卡尔积 | 选择 | 投影 | 连接 | 除 |\n\n*注:前四个`集合运算`, 后四个`关系运算`*\n\n## 四.关系数据库标准语言SQL\n### 1. SQL特点\n- 综合统一\n- 高度非过程化\n- 面向集合的操作方式\n- 以同一中语法结构提供多种使用方式\n- 语言简单,易学易用\n\n### 2. 数据定义: `模型定义`,`表定义`,`视图`,`索引`\n- 创建模式\n\n    ```sql\n    CREATE SCHEMA <模式名> AUTHORIZATION <用户名> [<表定义>|<视图定义>|<授权定义>];\n    ```\n\n- 删除模式\n\n    ```sql\n    DROP SCHEMA <模式名> <CASCADE | RESTRICT>;\n    ```\n\n- 创建表\n\n    ```sql\n    CREATE TABLE <表名> (<列名><数据类型> [列级完整性约束条件]\n    [, <列名><数据类型> [列级完整性约束条件]]\n    ...\n    [, <表级完整性约束条件>]\n    );\n    ```\n\n- 删除表\n\n    ```sql\n    DROP TABLE <表名> <CASCADE | RESTRICT>;\n    ```\n\n- 修改表\n\n    ```sql\n    ALTER TABLE <表名>\n    [ADD [COLUMN] <新列名> <数据类型> [完整性约束]]\n    [ADD <表级完整性约束>]\n    [DROP [COLUMN] <列名> [CASCADE | RESTRICT] ]\n    [DROP CONSTRAINT <完整性约束名> [RESTRICT | CASCADE] ]\n    [ALTER COLUMN <列名> <数据类型>]\n    ;\n    ```\n\n- 创建索引\n\n    ```sql\n    CREATE [UNIQUE] [CLUSTER] INDEX <索引名>\n    ON <表名>( <列名> [<次序>]  [, <列名> [<次序>]] ... );\n    ```\n\n- 修改索引\n\n    ```sql\n    ALTER INDEX <旧索引名> RENAME TO <新索引名>;\n    ```\n\n- 删除索引\n\n    ```sql\n    DROP INDEX <索引名>;\n    ```\n### 3. 数据查询\n```sql\nSELECT [ALL | DISTINCT] <目标列表达式> [, <目标列表达式>] ...\n    FROM <表名|视图名> [, <表名|视图名> ...] | (<SELECT语句>) [AS] <别名>\n    [WHERE <条件表达式>]\n    [GROUP BY <列名1> [HAVING <条件表达式>]]\n    [ORDER BY <列名2> [ASC|DESC]]\n    ;\n```\n\n| **查询条件**   | **谓词**                                  |\n| -------------- | -----------------------------             |\n| 比较           | `=` `>` `<` `>=` `<=` `!=` `<>` `!>` `!<` |\n| 确定范围       | `BETWEEN AND` `NOT BETWEEN AND`           |\n| 确定集合       | `IN` `NOT IN`                             |\n| 字符匹配       | `LIKE` `NOT LIKE`                         |\n| 空值           | `IS NULL` `IS NOT NULL`                   |\n| 逻辑运算       | `AND` `OR` `NOT`                          |\n\n**聚集函数**\n\n| **函数名**                       | **含义**             |\n| -------------------------------- | -------------------- |\n| `COUNT(*)`                       | 统计元组个数         |\n| `COUNT( [DISTINCT/ALL] <列名> )` | 统计一列中值的个数   |\n| `SUM( [DISTINCT/ALL] <列名> )`   | 计算一列值的总和     |\n| `AVG( [DISTINCT/ALL] <列名> )`   | 计算一列值的平均值   |\n| `MAX( [DISTINCT/ALL] <列名> )`   | 求一列的最大值       |\n| `MIN( [DISTINCT/ALL] <列名> )`   | 求一列的最小值       |\n\n**GROUP BY 子句**\n\n将查询结果按某一列或多列的值分组,值相等的为一组\n>(分组后聚集函数将作用于每一个组,即每一个组都有一个函数值)\n\n### 4. 数据更新\n- 插入元组\n\n    ```sql\n    INSERT INTO <表名> [(<属性列1> [,<属性列2>] ...)]\n    VALUES(<常量1> [,<常量2>] ...);\n    ```\n\n- 插入子查询结构\n\n    ```sql\n    INSERT INTO <表名> [(<属性列1> [, <属性列2>] ...)]\n    子查询;\n    ```\n\n- 修改数据\n\n    ```sql\n    UPDATE <表名> SET <列名>=<表达式> [,<列名>=<表达式>] ...\n    [WHERE <条件>];\n    ```\n\n- 删除数据\n\n    ```sql\n    DELETE\n    FROM <表名>\n    [WHERE <条件>]\n    ;\n    ```\n\n### 5. 视图\n- 创建视图\n\n    ```sql\n    CREATE VIEW <视图名> [(<列名> [,<列名>] ...)]\n    AS <子查询>\n    [WITH CHECK OPTION]\n    ;\n    ```\n\n- 删除视图\n\n    ```sql\n    DROP VIEW <视图名> [CASCADE];\n    ```\n\n- 更新视图: 对视图的查询和基本表相同,但是更新操作受到以下三条规则限制\n    - 如果试图从多个基本表使用联合操作导出,则不允许更新\n    - 如果导出的视图使用了分组和聚合操作,也不允许更新\n    - 如果视图从单个基本表使用选择和投影导出,并包括了主码或某个候选码,则可以操作\n\n### 6. 数据安全性\n>数据安全性是指保护数据库以防止不合法使用所造成的数据泄漏,更改或破坏\n\n#### I. 数据的不安全因素\n- 非授权用户对数据库的恶意存取和破坏\n- 数据库中重要或敏感的数据被泄漏\n- 安全环境的脆弱性\n\n#### II. 实现数据库系统安全的技术和方法\n有多种,最重要的是`存取控制技术`和`审计技术`,目前许多大型DBMS达到的**C2**级,其安全版本达到**B1**.\n\n**C2**级的DBMS必须具有自主存取控制功能和审计功能,**B1**级的必须具有强制存取控制功能和增强的审计功能.\n\n自主存取控制功能一般是通过**SQL**的`GRANT`语句和`REVOKE`语句来实现.\n\n#### III. 常用存取控制方法\n- 自主存取控制 (Discretionary Access Control,DAC)\n\n    同一用户对于不同的数据对象有不同的存取权限,不同用户对同一对象也不同权限,用户还可以将其拥有的存取权限转授其他用户\n- 强制存取控制 (Mandatory Access Control,MAC)\n\n    每一个数据对象被标记一定的密级,每一个用户也被授予某一个级别的许可证,对于任意一个对象,只有具有合法许可证的用户才可以存取\n\n### 7. 数据完整性\n#### I. 维护数据库的完整性,DBMS必须实现:\n- 提供定义完整性约束条件的机制\n- 提供完整性检查的方法\n- 进行违约处理\n\n#### II. 实体完整性检查和违约处理:\n>在列级,表级定义主码后,每更新一次,DBMS将自动检查(有全表扫描,B+树索引)\n- 检查主码值是否唯一,如果不唯一则拒绝插入或修改\n- 检查主码的各个属性是否为空值,只有一个空值就拒绝插入或修改\n\n#### III. 参照完整性\n>用`FOREIGN KEY`短语定义哪些列为外码<br>\n用`reference`指明这些外码参照哪些表的主码,参照完整性检查和违约处理\n\n| 被参照表           | 参照表             | 违约处理                 |\n|--------------------|--------------------|--------------------------|\n| 可能破坏参照完整性 | 插入元组           | 拒绝                     |\n| 可能破坏参照完整性 | 修改外码值         | 拒绝                     |\n| 删除元组           | 可能破坏参照完整性 | 拒绝/联级删除/设置为空值 |\n| 修改主码值         | 可能破坏参照完整性 | 拒绝/联级操作/设置为空值 |\n\n*备注:拒绝(NO ACTION),联级(CASCADE)*\n\n#### IV. 用户定义完整性\n- 属性上约束条件的定义: 包括列值非空(`NOT NULL`),列值唯一(`UNIQUE`),检查列值是否满足一个条件表达式(CKECK sentence)\n\n    属性上约束条件的检查和违约处理: 当往表中插入元组或修改属性的值时,DBMS将检查属性上的约束条件是否被满足,不满足拒绝执行.\n\n- 元组上约束条件的定义: 与属性上类似,用CHECK定义元组上的约束条件,即元组级限制(可设置不同属性之间的相互约束条件)\n\n    元组上约束条件的检查和违约处理: 当往表中插入元组或修改属性的值时,DBMS将检查元组的约束条件是否被满足,不满足拒绝执行.\n\n#### V. 完整性约束命名句子\n- 完整性约束命名句子\n```sql\nCONSTRAINT <完整性约束条件命名> <完整约束条件>\n   # 完整性约束条件包括: NOT NULL, UNIQUE, PRIMARY KEY, FOREEIGN KEY, CHAECK 短语等\n```\n- 修改完整性约束条件: 使用`ALTER TABLE sentence`\n\n#### VI. 断言\n通过声明性断言(declarative assertions)来制定更具有一般性的约束,可以定义设计多个表或聚集操作的比较复杂的完整性思想,断言创建后任何涉及关系的操作都会触发DBMS对断言的检查.\n\n```sql\n#创建断言\nCREATE ASSERTION <断言名> <CHECK 子句>\n#删除断言\nDROP ASSERTION <断言名>\n```\n#### VII. 触发器\n触发器又叫做事件-条件-动作(event-condition-action)规则, 是用户定义在关系表上的一类由事件驱动的特殊过程, 当特定的系统事件(如表的增删改查操作,事物的结束)发生时,对规则的条件进行检查,若成立则执行\n\n- 定义触发器\n\n    ```sql\n    CREATE TRIGGER <触发器名>  #每当触发事件发生时,该触发器被激活\n        {BEFORE|AFTER} <触发事件> ON <表名> #指明触发器激活时是在触发器事件前或后\n        REFERENCING NEW | OLD ROW AS <变量>  #REFERENCING 指出引用的变量\n        FOR EACH {ROW|STATEMENT}  #定义触发器的类型,指明动作体的频率\n        [WHEN <触发器条件>] <触发动作体>  #仅当触发条件为真时才执行触发动作体\n    ```\n\n- 激活触发器: 发器的执行是由触发事件激活并由数据库服务器自动执行, 激活应遵循如下执行顺序\n    1. 执行该表上的BEFORE触发器\n    1. 激活触发器的SQL语句\n    1. 执行该表上的AFTER触发器\n\n- 删除触发器\n\n    ```sql\n    DROP TRIGGER <触发器名> ON <表名>;\n    ```\n\n# 第六章 关系数据理论\n\n(一个好的关系模式应当不会发生`插入异常`,`删除异常`和`更新异常`,数据冗余应尽可能少.)\n\n- 数据依赖是一个关系内部属性与属性之间的约束关系,这种关系是通过属性之间的相等与否体现出来的数据相关联系;其中最重要的是 `函数依赖` 和 `多值依赖`\n- 规范化: 一个低一级范式的关系模式通过模式分解可以转换为若干个高一级范式的关系模型的集合,这个过程就是规范化.\n\n    - 1NF: 第一范式.每一个分量必须不可再分的数据项.\n\n        *缺点: 数据冗余,插入异常,删除异常,更新异常*\n    - 2NF: 第二范式.首先属于 `1NF`,且每一个非主属性完全函数依赖与任何一个候选码.\n\n        *缺点: 插入异常,删除异常,修改复杂*\n    - 3NF: 第三范式.首先属于 `2NF`,且不存在依赖传递.\n\n        *并不能完全消除各种异常情况和数据冗余*\n    - BCNF: 修正第三范式.基本消除了任何属性对码的依赖传递和部分依赖.性质:\n\n        1. 所有非主属性对每一个码都是完全依赖关系\n        2. 所有主属性对每一个不包含它的码也是完全函数依赖\n        3. 没有任何属性完全函数依赖于非码的任何一组属性\n\n    - 4NF: 第四范式.不允许有非平凡且非函数依赖的多值依赖,允许的非平凡多值依赖的函数依赖\n\n![fanshi](http://dl.iteye.com/upload/attachment/318920/fa4fcfba-7888-310d-bd10-a736ef1ac97d.gif)\n\n## 数据依赖的公理系统\n#### 1. Armstrong公理系统\nArmstrong是一个有效且完备的公理系统, 公理系统是模式分解算法的理论基础\n\n设 U 为属性集总体: F是U上的一组函数依赖,于是有关系模型R<U,F>.对于R<U,F>来说有以下推理规则:\n- 自反律: 若Y⊆X⊆U,则X->Y为F所蕴含\n- 增广律: 若X->Y为F所蕴含,且Z⊆U, 则XZ->YZ为F所蕴含\n- 传递律: 若X->Y及Y->Z为F所蕴含,则X->Z为F所蕴含\n\n推导:\n- 合并规则:由X->Y, X->Z,有X->YZ\n- 伪传递规则:由X->Y, WY->Z,有XW->Z\n- 分解规则:由X->Y及Z⊆Y,有X->Z\n\n#### 2. 闭包F+\n在关系模式R<U,F>中为F所逻辑蕴含的函数依赖的全体叫作F的闭包,即为F+.\n\n#### 3. X关于函数依赖集F的闭包XF+\n定义:设$F$为属性集$U$上的一组函数依赖, $X⊆U$,$X_{F^+}=\\{A|X->A能由F根据Armstrong公理导出\\}$,$X_{F^+}$称为属性集X关于函数依赖集F的闭包\n\n#### 4. 最小依赖集\n又称最小覆盖,满足以下条件:\n- F中任一函数依赖的右部只含有一个属性\n- F中不存在这样的函数依赖X->A,使得F与F-{X->A}等价\n- F中不存在这样的函数依赖X->A,X有真子集Z使得F-{X->A}∪{Z->A}与F等价\n\n## 模式分解定义\n**分解具有: 无损连接性, 保持函数依赖, 既要保持函数依赖又要具有无损连接性** \n\n#### 1. 关于模式分解的重要事实:\n- 若要求分解保持函数依赖,那一定可以达到3NF,不一定达到BCNF\n- 若要求分解保持函数依赖,又具有无损连接性,可以达到3NF,不一定达到BCNF\n- 若要求分解具有无损连接性,那一定可以达到4NF\n\n#### 2. 损连接性分解\n**分解后的关系自然连接,完全等于分解前的关系,则这个分解相对于F是无损连接分解.**\n\n判断分解无损连接性的算法:\n- 表格法\n- 设R的分解为ρ={R1,R2},F为R所满足的函数依赖集，则分解ρ具有无损联接性的充分必要条件是：R1∩R2→(R1-R2) 或者 R1∩R2→(R2-R1)\n\n#### 3. 保持函数依赖的分解\n`Let F' = F1U … FiU .. UFn` , 若`F`与`F'`等价，即`F'+ = F+` ，则保持函数依赖。\n\n判断方法：`F`所有原函数依赖可以由`F'`的函数依赖逻辑导出\n\n# 第七章 数据库设计概述\n#### 1. 数据库应用系统的开发也是一项软件工程,称为数据库工程.\n\n数据库应用系统也有生存期的概念,通常包括六个阶段:\n- 需求分析阶段: 需求收集,分析,处理->DD(数据字典)和DFD(数据流图)\n- 概念设计阶段: 设计概念结构->E-R图\n- 逻辑设计阶段: 设计逻辑结构和数据模型\n- 物理设计阶段: 关系模式存取方法(B+树,hash索引,聚簇存取),设计物理文件存储结构\n- 实现阶段: 物理实现,实验性运行\n- 运行维护阶段: 使用,维护数据库\n\n#### 2. 概念设计的主要步骤:\n1. 机型数据抽象,设计局部概念模式\n2. 将局部概念模式综合成全局概念模式\n3. 评审\n\n#### 3. 采用E-R法进行数据库概念设计分三步:\n1. 首先设计局部E-R模式\n2. 然后把各局部E-R模式综合成全局E-R模式\n3. 最后对全局E-R模式进行优化\n\n#### 4. 逻辑结构设计: 把E-R图转换为与选用DBMS支持的数据模型相符合的逻辑结构\n\n#### 5. 数据模型优化:其结果不唯一,方法为:\n1. 确定数据依赖\n2. 消除冗余关系\n3. 确定关系模式处于第几范式\n4. 根据需求分析确定哪种模式适合应用环境(并非范式化越高越优)\n\n#### 6. E-R图向关系转化的原则:\n- 一个实体型转换为一个关系模式.(属性, 码)\n- 1:1联系可转为独立关系模式,也可与其一合并.(若合并,联系的属性也一同合并)\n- 1:n联系可转为独立关系模式,也可与n端合并.(若合并,联系的属性也一同合并)\n- 三个或三个以上实体间的多元联系应转为一个关系模式.\n- 具有相同码的关系可合并\n\n# 第八章 SQL编程\n主语言为C,其格式为 `EXEC SQL <SQL语句>`\n\n主语言为Java,其格式为 `# SQL {<SQL语句>}`\n\n建立嵌入式SQL的连接语法: `EXEC SQL CONNECT TO target [AS connect-name][USERT user-name]` (备注:target是要连接的数据库服务器)\n\n#### 1. 存储过程\n1. 创建存储过程:\n\n```sql\nCREATE SQL REPLACE PROCEDURE 过程名 ([参数1,参数2,...])\n    AS <过程化SQL块>;\n```\n\n2. 执行存储过程:\n\n```sql\nCALL/PERFORM PROCEDURE 过程名 ([参数1,参数2,...]);\n```\n\n3. 修改存储过程:\n\n```sql\nALTER PROCEDURE 过程名1 RENAME TO 过程名2;\n```\n4. 删除存储过程:\n\n```sql\nDROP PROCEDURE 过程名;\n```\n\n#### 2. ODBC: 由用户应用程序+ODBC驱动程序管理器+数据库驱动程序+数据源构成\n- 其工作流程:\n- 配置数据源\n- 初始化环境\n- 建立连接\n- 分配语句句柄\n- 执行SQL语句\n- 结果处理集\n- 终止处理\n\n# 第九章 查询优化\n步骤为:\n\n- 查询分析:语法,词法\n- 查询检查:语义,权限,安全性检查\n- 查询优化:代数优化,物理优化\n- 查询执行:代码生成\n\n查询优化的目的就是为了系统在执行时既省时间又能提高效率，在关系代数运算中，通常是先进行笛卡尔积或联接运算，再进行选择和投影，恰当地安排选择、投影和联接的顺序，就可实现查询优化。优化的策略主要有以下几点：\n- 在关系代数表达式中尽可能早地执行选择操作(早做选择).\n- 把笛卡尔积和随后的选择操作合并成连接运算 (尽可能做自然连接或等值连接，不做笛卡尔积).\n- 同时计算一连串的选择和投影操作，使操作对象尽可能变小。\n- 连接多个对象时，先做连接结果小的连接。\n- 计算表达式之前先估计一下怎么计算合算\n\n# 第十章 数据库恢复技术\n##### 1. 事务是数据库的逻辑工作单位，其特点:原子性、一致性、隔离性和持续性\n定义事务的语句一般有三条:`BEGIN TRANSATION`; `COMMIT`; `ROLLBACK`;\n1. 事务开始通常由BEGIN TRANSACTION, COMMIT或ROLLBACK结束,\n\n2. commit提交事务的所有操作,\n\n3. rollback表示回滚,即事务运行中发生了故障,系统将事务中对数据库的所有已完成的操作全部撤销,回滚到事务开始的状态\n\n#### 2. 故障类型: \n事物故障,系统故障和介质故障\n\n#### 3. 恢复中最常用的技术:\n数据库转储,登记日志文件\n\n#### 4. 恢复的基本原理:\n利用存储的备份副本,日志文件或数据库镜像中冗余的数据来重建数据库\n\n#### 5. 常用恢复技术:\n- 事物故障的回复:UNDO\n- 系统故障的恢复:未提交的事物做UNDO,以提交的做REDO\n- 介质事物的恢复:重装备份并恢复到一致性状态+REDO\n\n#### 6. 提高恢复效率的技术\n检查点技术\n- 可以提高系统故障的恢复效率\n- 可以在一定程度上提高利用动态转储备份进行介质故障恢复的效率\n\n镜像技术\n- 镜像技术可以改善介质故障的恢复效率\n\n# 第十一章 并发控制\n#### 1. 数据库的并发控制以事务为单位,每一时刻只有一个事务在运行(在单处理机系统中,事务的并行执行实际上是并行操作轮流交叉运行)\n\n#### 2. 数据库的并发控制通常使用封锁机制(也有时间戳,乐观控制法,多本并发控制等其他方法), 其基本类型有两种排他锁(又称写锁, X锁)和共享锁(又称读锁, S锁)\n\n| 横向为事务T1,纵向为事务T2   | X | S | - |\n|-----------------------------|---|---|---|\n| X                           | N | N | Y |\n| S                           | N | Y | Y |\n| --------------------------- | Y | Y | Y |\n| 备注:Y相容请求,N不相容请求  |   |   |   |\n\n#### 3. 常用的封锁协议\n不同级别的封锁协议提供不同的数据一致性保证,提供不同的数据共享度.\n\n| 名称 | 定义                                                          | 优点                             | 缺点                       |\n|------|---------------------------------------------------------------|----------------------------------|----------------------------|\n| 一级 | 事务T在修改数据R前必须先加X锁,直到事务结束才释放              | 可以防止丢失修改并保证事务可恢复 | 不保证可重复读和不读脏数据 |\n| 二级 | 在一级基础上,增加事务T在读取数据R前必须加S锁,读完后立即释放   | 可防止丢失修改和读脏数据         | 不保证可重复读             |\n| 三级 | 在一级基础上,增加事务T读取数据R前必须加S锁,直到事务结束才释放 | 可防止丢失修改和读脏数据         | -                          |\n\n#### 4. 并发控制机制调度并发事务操作是否正确的判别准则是可串行性\n- 并发操作的正确准则性通常由两段锁协议保证(2PL)\n\n    - 获得封锁,在对任何数据读写之前要申请并获取对该数据的封锁\n    - 释放封锁,释放封锁之后,事务不再申请和获得任何其他锁\n\n- 两段锁协议是可串行化调度的充分条件,但不是并要条件\n\n#### 5. 对象数据施加封锁,带来问题\n- 活锁:解决额方法,先来先服务\n- 死锁:预防方法,一次封锁法,顺序封锁法\n\n#### 6. 死锁的诊断与解除: \n超时法和等待图法\n\n#### 7. 封锁粒度:\n封锁的粒度越大->数据库能封锁的数据单元越少,并发度越小,系统开销越小;粒度越小,则相反.\n\n多粒度封锁分为:\n- 显式封锁:直接加到数据对象上的封锁\n- 隐式封锁:由于其上级结点加锁而使该数据对象加锁\n\n#### 8. 意向锁(intention lock)\n- 目的:提高对某个数据对象加锁时系统的检查效率\n- IS, IX, SIX锁\n","slug":"Introduction-to-Database-Principle-note","published":1,"date":"2020-04-29T02:11:22.882Z","updated":"2020-04-29T02:11:22.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9kxg1wy0000ytn336d88b40","content":"<p>I have recently studied the database again, so take a note</p>\n<a id=\"more\"></a>\n\n<h1 id=\"第一章-绪论\"><a href=\"#第一章-绪论\" class=\"headerlink\" title=\"第一章 绪论\"></a>第一章 绪论</h1><h4 id=\"1-数据管理技术的发展阶段\"><a href=\"#1-数据管理技术的发展阶段\" class=\"headerlink\" title=\"1. 数据管理技术的发展阶段 :\"></a>1. <strong>数据管理技术的发展阶段</strong> :</h4><ul>\n<li>人工管理阶段</li>\n<li>文件系统阶段</li>\n<li>数据库阶段</li>\n</ul>\n<p><em>其中文件阶段到数据库阶段是质的飞跃.</em></p>\n<h4 id=\"2-名词概念\"><a href=\"#2-名词概念\" class=\"headerlink\" title=\"2. 名词概念\"></a>2. <strong>名词概念</strong></h4><ul>\n<li>数据 描述事务的符号被称为数据.</li>\n<li>DB DataBase数据库,是长期存储在计算机内,有组织,可共享的大量数据集合.</li>\n<li>DBMS 数据库管理系统.</li>\n<li>DBS 数据库系统,由DB+DBMS+应用程序+数据库管理员(DBA)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>人工管理阶段</strong></th>\n<th><strong>文件系统阶段</strong></th>\n<th><strong>数据库系统阶段</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>背景</em></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>应用背景</strong></td>\n<td>科学计算</td>\n<td>科学计算,数据管理</td>\n<td>大规模数据管理</td>\n</tr>\n<tr>\n<td><strong>硬件背景</strong></td>\n<td>无直接存储设备</td>\n<td>硬盘,磁鼓</td>\n<td>大容量磁盘,磁盘阵列</td>\n</tr>\n<tr>\n<td><strong>软件背景</strong></td>\n<td>没有操作系统</td>\n<td>有文件系统</td>\n<td>有数据库管理系统</td>\n</tr>\n<tr>\n<td><strong>处理方式</strong></td>\n<td>批处理</td>\n<td>联机实时处理,批处理</td>\n<td>联机实时处理,批处理,分布处理</td>\n</tr>\n<tr>\n<td><em>特点</em></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>数据管理者</strong></td>\n<td>用户(程序员)</td>\n<td>文件系统</td>\n<td>数据库管理系统</td>\n</tr>\n<tr>\n<td><strong>数据面向的对象</strong></td>\n<td>应用程序</td>\n<td>应用</td>\n<td>现实世界(如:一个企业)</td>\n</tr>\n<tr>\n<td><strong>数据的共享程度</strong></td>\n<td>无共享,冗余度最大</td>\n<td>共享性差,冗余度大</td>\n<td>共享性高,冗余度小</td>\n</tr>\n<tr>\n<td><strong>数据的独立性</strong></td>\n<td>不独立,完全依赖程序</td>\n<td>独立性差</td>\n<td>高度物理独立性和一定逻辑独立性</td>\n</tr>\n<tr>\n<td><strong>数据的结构化</strong></td>\n<td>无结构</td>\n<td>记录内有结构,整体无结构</td>\n<td>整体结构化,模型描述</td>\n</tr>\n<tr>\n<td><strong>数据控制能力</strong></td>\n<td>程序控制</td>\n<td>程序控制</td>\n<td>数据管理系统</td>\n</tr>\n</tbody></table>\n<p><strong>数据模型</strong> :对现实数据特征的抽象 (现实世界_-&gt;信息时间诶-&gt;机器世界)</p>\n<h4 id=\"3-数据模型的基本概念-关系模型\"><a href=\"#3-数据模型的基本概念-关系模型\" class=\"headerlink\" title=\"3. 数据模型的基本概念(关系模型)\"></a>3. 数据模型的基本概念(关系模型)</h4><table>\n<thead>\n<tr>\n<th>名次</th>\n<th>英文名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>实体</td>\n<td>enity</td>\n<td>客观存在并可相互区别的事物</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>attribute</td>\n<td>实体所具有的某一特性</td>\n</tr>\n<tr>\n<td>码</td>\n<td>key</td>\n<td>唯一标识实体的属性称为码</td>\n</tr>\n<tr>\n<td>实体型</td>\n<td>entitty</td>\n<td>用实体名及其属性名集合来抽象和刻画同类实体</td>\n</tr>\n<tr>\n<td>实体集</td>\n<td>enityset</td>\n<td>同一类实体的集合</td>\n</tr>\n<tr>\n<td>联系</td>\n<td>relationship</td>\n<td>实体内部联系常指组成实体的各属性之间的联系,之间的联系指不同实体集之间的联系</td>\n</tr>\n<tr>\n<td>联系的种类</td>\n<td></td>\n<td>一对一,一对多,多对多</td>\n</tr>\n<tr>\n<td>关系</td>\n<td>relation</td>\n<td>一对关系对应一张表</td>\n</tr>\n<tr>\n<td>元组</td>\n<td>tuple</td>\n<td>表中一行为一个元组</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>attitude</td>\n<td>表中一列为一个属性</td>\n</tr>\n<tr>\n<td>码</td>\n<td>key</td>\n<td>又称码键,表中的某一个属性可以唯一确认一个元组</td>\n</tr>\n<tr>\n<td>域</td>\n<td>domain</td>\n<td>具有相同数据类型的值的集合</td>\n</tr>\n<tr>\n<td>分量</td>\n<td></td>\n<td>元组中的一个属性值</td>\n</tr>\n<tr>\n<td>关系模式</td>\n<td></td>\n<td>对关系的表述,一般表示为:关系名(attitude1, attitude2 …)</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-数据模型分类\"><a href=\"#4-数据模型分类\" class=\"headerlink\" title=\"4. 数据模型分类.\"></a>4. 数据模型分类.</h4><p><strong>根据应用不同,第一类是概念模型,第二类是逻辑模型和物理模型</strong>.</p>\n<ul>\n<li><strong>概念模型</strong> :也称为信息模型,是按用户的观点来对数据和信息建模,主要用于数据库设计.其中一种表示方法: <em>实体-联系方法</em>又称 <code>E-R</code> 方法, 使用 <code>E-R</code> 图实现.</li>\n<li><strong>逻辑模型</strong> :主要包括 层次模型 网状模型 关系模型,另外还有 面象对象数据模型 对象关系模型 半结构化模型 等,是按计算机系统的观点对数据建模,主要用于数据库管理系统的实现.</li>\n<li><strong>物理模型</strong> :是对数据最底层的抽象,它描述数据在系统内部的表示方式和存储方法,或在磁盘或磁带上的存储方式和存取方法,是面向计算机的.</li>\n</ul>\n<p><strong>层次模型</strong> </p>\n<pre><code>定义:\n    1. 有且只有一个节点没有双亲节点 \n    2. 根以外其他节点有且只有一个双亲节点 \n优点:\n    1. 数据结构较清晰 \n    2. 查询效率高 \n    3. 提供了良好的完整性支持   \n缺点:\n    1. 现实世界大多不是层次关系 \n    2. 查询子女节点必须通过双亲节点 \n    3. 结构过于严密,层次命令趋于程序化 </code></pre><p><strong>网状模型</strong></p>\n<pre><code>定义:\n    1. 允许一个以上的节点无双亲节点 \n    2. 一个节点可有多于一个的双亲节点    \n优点:\n    1. 更直接的描述世界 \n    2. 具有良好的性能,存取效率高  \n缺点:\n    1. 结构较复杂 \n    2. 需要嵌入高级语言,用户不易掌握,不易使用 \n    3. 记录之间的联系通过存取路径实现,因此用户必须了解系统结构的细节 </code></pre><p><strong>关系模型</strong></p>\n<pre><code>定义:\n    要求关系必须是规范化的,即每一个分量不可再分    \n优点:\n    1. 建立在严格的数学概念上 \n    2. 概念单一,数据结构简单,清晰 \n    3. 存取路径对用户透明,数据的独立性,安全保密性更好 \n缺点:\n    查询效率低,需要优化  </code></pre><h4 id=\"5-数据模型\"><a href=\"#5-数据模型\" class=\"headerlink\" title=\"5. 数据模型\"></a>5. 数据模型</h4><p><strong>组成要素: <code>数据结构</code>+<code>数据操作</code>+<code>数据完整行约束条件</code></strong></p>\n<ul>\n<li>数据结构: 描述数据库的组成对象及对象之间的联系.</li>\n<li>数据操作: 指对数据库中各种对象的实例(值)允许执行的操作的集合,包括操作及有关的操作规则.</li>\n<li>完整性约束条件: 是一组完整性规则.</li>\n</ul>\n<h4 id=\"6-三级结构模式\"><a href=\"#6-三级结构模式\" class=\"headerlink\" title=\"6. 三级结构模式\"></a>6. 三级结构模式</h4><p><strong>数据库的体系结构分为三级: <code>内部级</code>, <code>概念级</code>和<code>外部级</code>.</strong></p>\n<ul>\n<li>模式(概念级): 是数据库中全体数据的逻辑结构和特征的描述,是所有用户的公共数据视图.</li>\n<li>外模式(外部级): 能够看见和使用的局部数据的逻辑结构和特征的描述,是数据库用户的数据视图.</li>\n<li>内模式(内部级): 也称为存储模式,一个数据库只有一个内模式,最接近物理存储,涉及到实际数据存储的结构,是数据在数据库内部的组织方式.</li>\n</ul>\n<h4 id=\"7-两层映像\"><a href=\"#7-两层映像\" class=\"headerlink\" title=\"7. 两层映像\"></a>7. 两层映像</h4><p>(<strong>保证了数据库系统中的数据能够具有较高的逻辑独立性和物理独立性</strong>)</p>\n<ul>\n<li>模式/内模式映像: 用于定义概念模式和内模式之间的对应性.一般在内模式中描述.</li>\n<li>外模式/模式映像: 用于定义外模式和概念模式之间的对应性.一般在外模式中描述.</li>\n</ul>\n<h4 id=\"8-两级数据独立性\"><a href=\"#8-两级数据独立性\" class=\"headerlink\" title=\"8. 两级数据独立性\"></a>8. 两级数据独立性</h4><ul>\n<li>物理数据独立性:修改内模式时尽量不影响概念模式及外模式,则达到物理数据独立性.</li>\n<li>逻辑数据独立性: 修改概念模式时尽量不影响外模式和应用程序.</li>\n</ul>\n<h4 id=\"9-硬件平台及数据库\"><a href=\"#9-硬件平台及数据库\" class=\"headerlink\" title=\"9. 硬件平台及数据库\"></a>9. 硬件平台及数据库</h4><ul>\n<li>要足够大的内存</li>\n<li>足够大的磁盘或磁盘阵列等设备存放数据库,作数据备份</li>\n<li>系统有较高的通道能力,以提高数据传送效率</li>\n</ul>\n<h4 id=\"10-软件\"><a href=\"#10-软件\" class=\"headerlink\" title=\"10. 软件\"></a>10. 软件</h4><ul>\n<li>DBMS</li>\n<li>支持DBMS的OS</li>\n<li>相应的高级语言操作数据库</li>\n<li>以DBMS为核心的开发工具</li>\n</ul>\n<h4 id=\"12-人员\"><a href=\"#12-人员\" class=\"headerlink\" title=\"12. 人员\"></a>12. 人员</h4><ul>\n<li>DMA:<ol>\n<li>决定数据库的信息内容和结构.</li>\n<li>决定数据库的存储结构和存取策略.</li>\n<li>定义数据的安全性要求和完整约束条件.</li>\n<li>监控数据库的运行和使用.</li>\n<li>数据库的改进和重构.</li>\n</ol>\n</li>\n<li>系统分析员和数据库设计人员</li>\n<li>应用程序人员</li>\n</ul>\n<h1 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h1><h2 id=\"一-关系模型\"><a href=\"#一-关系模型\" class=\"headerlink\" title=\"一.关系模型\"></a>一.关系模型</h2><blockquote>\n<p>可形式化表示为 <code>R(U, D, DOM, F)</code><br><br><code>R</code> 为关系名，<code>U</code> 为属性名集合，<code>D</code> 为 <code>U</code> 中属性所来自的域<br><br><code>DOM</code> 为属性向域的映像集合，<code>F</code> 为属性间数据的依赖关系集合<br><br>关系模型只包含单一的数据结构——关系（是笛卡尔积的有限子集）<br><br>用户看来其中的数据逻辑结构是一张扁平的二维表<br></p>\n</blockquote>\n<h4 id=\"1-码\"><a href=\"#1-码\" class=\"headerlink\" title=\"1. 码\"></a>1. 码</h4><p> <strong>由一个或几个属性组成</strong></p>\n<ul>\n<li>候选码: 可以唯一标识每一组的属性组</li>\n<li>主码: 用户选做元组标识的一个候选键位主键</li>\n<li>外码: 某个关系的主码相应的属性在另一关系中出现,此时主键就是另一个关系的外码</li>\n</ul>\n<h4 id=\"2-三种关系类型\"><a href=\"#2-三种关系类型\" class=\"headerlink\" title=\"2. 三种关系类型\"></a>2. 三种关系类型</h4><ol>\n<li>基本关系(或基表,是实际存在的表,实际存储数据的逻辑表示),</li>\n<li>查询表(是查询结果对应的表),</li>\n<li>视图表(是由基本表或其他试图表导出,是虚表).</li>\n</ol>\n<h4 id=\"3-基本关系的六条性质\"><a href=\"#3-基本关系的六条性质\" class=\"headerlink\" title=\"3. 基本关系的六条性质\"></a>3. 基本关系的六条性质</h4><ol>\n<li>列是同质的</li>\n<li>不同列可出自同一域</li>\n<li>列的顺序无所谓</li>\n<li>行的顺序无所谓</li>\n<li>任意两个元组的候选码不能同值</li>\n<li>分量必须是原子值,即每一个分量都是比不可分的</li>\n</ol>\n<h2 id=\"二-关系完整性\"><a href=\"#二-关系完整性\" class=\"headerlink\" title=\"二.关系完整性\"></a>二.关系完整性</h2><blockquote>\n<p>关系模型有三类: <code>实体完整性</code>, <code>参照完整性</code>, <code>用户定义完整性</code>.前两个必须满足,称为关系的两个不变性.</p>\n</blockquote>\n<ul>\n<li>实体完整性规则: 要求关系中组成主码的属性不能有空值</li>\n<li>参照完整性规则: 要求不引用不存在的实体,但可以空值</li>\n<li>用户自定义完整性规则: 有具体应用环境决定,系统提供定义和检验这类完整性的机制</li>\n</ul>\n<h2 id=\"三-关系代数\"><a href=\"#三-关系代数\" class=\"headerlink\" title=\"三.关系代数\"></a>三.关系代数</h2><blockquote>\n<p>一种抽象的查询语言,是对关系运算来表达查询</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>∪</th>\n<th>∩</th>\n<th>-</th>\n<th>×</th>\n<th>σ</th>\n<th>Π</th>\n<th>⋈</th>\n<th>÷</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>含义</td>\n<td>并</td>\n<td>交</td>\n<td>差</td>\n<td>迪卡尔积</td>\n<td>选择</td>\n<td>投影</td>\n<td>连接</td>\n<td>除</td>\n</tr>\n</tbody></table>\n<p><em>注:前四个<code>集合运算</code>, 后四个<code>关系运算</code></em></p>\n<h2 id=\"四-关系数据库标准语言SQL\"><a href=\"#四-关系数据库标准语言SQL\" class=\"headerlink\" title=\"四.关系数据库标准语言SQL\"></a>四.关系数据库标准语言SQL</h2><h3 id=\"1-SQL特点\"><a href=\"#1-SQL特点\" class=\"headerlink\" title=\"1. SQL特点\"></a>1. SQL特点</h3><ul>\n<li>综合统一</li>\n<li>高度非过程化</li>\n<li>面向集合的操作方式</li>\n<li>以同一中语法结构提供多种使用方式</li>\n<li>语言简单,易学易用</li>\n</ul>\n<h3 id=\"2-数据定义-模型定义-表定义-视图-索引\"><a href=\"#2-数据定义-模型定义-表定义-视图-索引\" class=\"headerlink\" title=\"2. 数据定义: 模型定义,表定义,视图,索引\"></a>2. 数据定义: <code>模型定义</code>,<code>表定义</code>,<code>视图</code>,<code>索引</code></h3><ul>\n<li><p>创建模式</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt; [&lt;表定义&gt;|&lt;视图定义&gt;|&lt;授权定义&gt;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除模式</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> &lt;模式名&gt; &lt;<span class=\"keyword\">CASCADE</span> | RESTRICT&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建表</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> &lt;表名&gt; (&lt;列名&gt;&lt;数据类型&gt; [列级完整性约束条件]</span><br><span class=\"line\">[, &lt;列名&gt;&lt;数据类型&gt; [列级完整性约束条件]]</span><br><span class=\"line\">...</span><br><span class=\"line\">[, &lt;表级完整性约束条件&gt;]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除表</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> &lt;表名&gt; &lt;<span class=\"keyword\">CASCADE</span> | RESTRICT&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改表</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> &lt;表名&gt;</span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> [<span class=\"keyword\">COLUMN</span>] &lt;新列名&gt; &lt;数据类型&gt; [完整性约束]]</span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> &lt;表级完整性约束&gt;]</span><br><span class=\"line\">[<span class=\"keyword\">DROP</span> [<span class=\"keyword\">COLUMN</span>] &lt;列名&gt; [<span class=\"keyword\">CASCADE</span> | RESTRICT] ]</span><br><span class=\"line\">[<span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> &lt;完整性约束名&gt; [RESTRICT | <span class=\"keyword\">CASCADE</span>] ]</span><br><span class=\"line\">[<span class=\"keyword\">ALTER</span> <span class=\"keyword\">COLUMN</span> &lt;列名&gt; &lt;数据类型&gt;]</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">UNIQUE</span>] [CLUSTER] <span class=\"keyword\">INDEX</span> &lt;索引名&gt;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> &lt;表名&gt;( &lt;列名&gt; [&lt;次序&gt;]  [, &lt;列名&gt; [&lt;次序&gt;]] ... );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">INDEX</span> &lt;旧索引名&gt; <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> &lt;新索引名&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> &lt;索引名&gt;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-数据查询\"><a href=\"#3-数据查询\" class=\"headerlink\" title=\"3. 数据查询\"></a>3. 数据查询</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">ALL</span> | <span class=\"keyword\">DISTINCT</span>] &lt;目标列表达式&gt; [, &lt;目标列表达式&gt;] ...</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> &lt;表名|视图名&gt; [, &lt;表名|视图名&gt; ...] | (&lt;<span class=\"keyword\">SELECT</span>语句&gt;) [<span class=\"keyword\">AS</span>] &lt;别名&gt;</span><br><span class=\"line\">    [<span class=\"keyword\">WHERE</span> &lt;条件表达式&gt;]</span><br><span class=\"line\">    [<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &lt;列名<span class=\"number\">1</span>&gt; [<span class=\"keyword\">HAVING</span> &lt;条件表达式&gt;]]</span><br><span class=\"line\">    [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &lt;列名<span class=\"number\">2</span>&gt; [<span class=\"keyword\">ASC</span>|<span class=\"keyword\">DESC</span>]]</span><br><span class=\"line\">    ;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>查询条件</strong></th>\n<th><strong>谓词</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>比较</td>\n<td><code>=</code> <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>!=</code> <code>&lt;&gt;</code> <code>!&gt;</code> <code>!&lt;</code></td>\n</tr>\n<tr>\n<td>确定范围</td>\n<td><code>BETWEEN AND</code> <code>NOT BETWEEN AND</code></td>\n</tr>\n<tr>\n<td>确定集合</td>\n<td><code>IN</code> <code>NOT IN</code></td>\n</tr>\n<tr>\n<td>字符匹配</td>\n<td><code>LIKE</code> <code>NOT LIKE</code></td>\n</tr>\n<tr>\n<td>空值</td>\n<td><code>IS NULL</code> <code>IS NOT NULL</code></td>\n</tr>\n<tr>\n<td>逻辑运算</td>\n<td><code>AND</code> <code>OR</code> <code>NOT</code></td>\n</tr>\n</tbody></table>\n<p><strong>聚集函数</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>函数名</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>COUNT(*)</code></td>\n<td>统计元组个数</td>\n</tr>\n<tr>\n<td><code>COUNT( [DISTINCT/ALL] &lt;列名&gt; )</code></td>\n<td>统计一列中值的个数</td>\n</tr>\n<tr>\n<td><code>SUM( [DISTINCT/ALL] &lt;列名&gt; )</code></td>\n<td>计算一列值的总和</td>\n</tr>\n<tr>\n<td><code>AVG( [DISTINCT/ALL] &lt;列名&gt; )</code></td>\n<td>计算一列值的平均值</td>\n</tr>\n<tr>\n<td><code>MAX( [DISTINCT/ALL] &lt;列名&gt; )</code></td>\n<td>求一列的最大值</td>\n</tr>\n<tr>\n<td><code>MIN( [DISTINCT/ALL] &lt;列名&gt; )</code></td>\n<td>求一列的最小值</td>\n</tr>\n</tbody></table>\n<p><strong>GROUP BY 子句</strong></p>\n<p>将查询结果按某一列或多列的值分组,值相等的为一组</p>\n<blockquote>\n<p>(分组后聚集函数将作用于每一个组,即每一个组都有一个函数值)</p>\n</blockquote>\n<h3 id=\"4-数据更新\"><a href=\"#4-数据更新\" class=\"headerlink\" title=\"4. 数据更新\"></a>4. 数据更新</h3><ul>\n<li><p>插入元组</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> &lt;表名&gt; [(&lt;属性列<span class=\"number\">1</span>&gt; [,&lt;属性列<span class=\"number\">2</span>&gt;] ...)]</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(&lt;常量<span class=\"number\">1</span>&gt; [,&lt;常量<span class=\"number\">2</span>&gt;] ...);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>插入子查询结构</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> &lt;表名&gt; [(&lt;属性列<span class=\"number\">1</span>&gt; [, &lt;属性列<span class=\"number\">2</span>&gt;] ...)]</span><br><span class=\"line\">子查询;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改数据</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> &lt;表名&gt; <span class=\"keyword\">SET</span> &lt;列名&gt;=&lt;表达式&gt; [,&lt;列名&gt;=&lt;表达式&gt;] ...</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> &lt;条件&gt;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除数据</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> &lt;表名&gt;</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> &lt;条件&gt;]</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"5-视图\"><a href=\"#5-视图\" class=\"headerlink\" title=\"5. 视图\"></a>5. 视图</h3><ul>\n<li><p>创建视图</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> &lt;视图名&gt; [(&lt;列名&gt; [,&lt;列名&gt;] ...)]</span><br><span class=\"line\"><span class=\"keyword\">AS</span> &lt;子查询&gt;</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> <span class=\"keyword\">OPTION</span>]</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除视图</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> &lt;视图名&gt; [<span class=\"keyword\">CASCADE</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新视图: 对视图的查询和基本表相同,但是更新操作受到以下三条规则限制</p>\n<ul>\n<li>如果试图从多个基本表使用联合操作导出,则不允许更新</li>\n<li>如果导出的视图使用了分组和聚合操作,也不允许更新</li>\n<li>如果视图从单个基本表使用选择和投影导出,并包括了主码或某个候选码,则可以操作</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-数据安全性\"><a href=\"#6-数据安全性\" class=\"headerlink\" title=\"6. 数据安全性\"></a>6. 数据安全性</h3><blockquote>\n<p>数据安全性是指保护数据库以防止不合法使用所造成的数据泄漏,更改或破坏</p>\n</blockquote>\n<h4 id=\"I-数据的不安全因素\"><a href=\"#I-数据的不安全因素\" class=\"headerlink\" title=\"I. 数据的不安全因素\"></a>I. 数据的不安全因素</h4><ul>\n<li>非授权用户对数据库的恶意存取和破坏</li>\n<li>数据库中重要或敏感的数据被泄漏</li>\n<li>安全环境的脆弱性</li>\n</ul>\n<h4 id=\"II-实现数据库系统安全的技术和方法\"><a href=\"#II-实现数据库系统安全的技术和方法\" class=\"headerlink\" title=\"II. 实现数据库系统安全的技术和方法\"></a>II. 实现数据库系统安全的技术和方法</h4><p>有多种,最重要的是<code>存取控制技术</code>和<code>审计技术</code>,目前许多大型DBMS达到的<strong>C2</strong>级,其安全版本达到<strong>B1</strong>.</p>\n<p><strong>C2</strong>级的DBMS必须具有自主存取控制功能和审计功能,<strong>B1</strong>级的必须具有强制存取控制功能和增强的审计功能.</p>\n<p>自主存取控制功能一般是通过<strong>SQL</strong>的<code>GRANT</code>语句和<code>REVOKE</code>语句来实现.</p>\n<h4 id=\"III-常用存取控制方法\"><a href=\"#III-常用存取控制方法\" class=\"headerlink\" title=\"III. 常用存取控制方法\"></a>III. 常用存取控制方法</h4><ul>\n<li><p>自主存取控制 (Discretionary Access Control,DAC)</p>\n<p>  同一用户对于不同的数据对象有不同的存取权限,不同用户对同一对象也不同权限,用户还可以将其拥有的存取权限转授其他用户</p>\n</li>\n<li><p>强制存取控制 (Mandatory Access Control,MAC)</p>\n<p>  每一个数据对象被标记一定的密级,每一个用户也被授予某一个级别的许可证,对于任意一个对象,只有具有合法许可证的用户才可以存取</p>\n</li>\n</ul>\n<h3 id=\"7-数据完整性\"><a href=\"#7-数据完整性\" class=\"headerlink\" title=\"7. 数据完整性\"></a>7. 数据完整性</h3><h4 id=\"I-维护数据库的完整性-DBMS必须实现\"><a href=\"#I-维护数据库的完整性-DBMS必须实现\" class=\"headerlink\" title=\"I. 维护数据库的完整性,DBMS必须实现:\"></a>I. 维护数据库的完整性,DBMS必须实现:</h4><ul>\n<li>提供定义完整性约束条件的机制</li>\n<li>提供完整性检查的方法</li>\n<li>进行违约处理</li>\n</ul>\n<h4 id=\"II-实体完整性检查和违约处理\"><a href=\"#II-实体完整性检查和违约处理\" class=\"headerlink\" title=\"II. 实体完整性检查和违约处理:\"></a>II. 实体完整性检查和违约处理:</h4><blockquote>\n<p>在列级,表级定义主码后,每更新一次,DBMS将自动检查(有全表扫描,B+树索引)</p>\n</blockquote>\n<ul>\n<li>检查主码值是否唯一,如果不唯一则拒绝插入或修改</li>\n<li>检查主码的各个属性是否为空值,只有一个空值就拒绝插入或修改</li>\n</ul>\n<h4 id=\"III-参照完整性\"><a href=\"#III-参照完整性\" class=\"headerlink\" title=\"III. 参照完整性\"></a>III. 参照完整性</h4><blockquote>\n<p>用<code>FOREIGN KEY</code>短语定义哪些列为外码<br><br>用<code>reference</code>指明这些外码参照哪些表的主码,参照完整性检查和违约处理</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>被参照表</th>\n<th>参照表</th>\n<th>违约处理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>可能破坏参照完整性</td>\n<td>插入元组</td>\n<td>拒绝</td>\n</tr>\n<tr>\n<td>可能破坏参照完整性</td>\n<td>修改外码值</td>\n<td>拒绝</td>\n</tr>\n<tr>\n<td>删除元组</td>\n<td>可能破坏参照完整性</td>\n<td>拒绝/联级删除/设置为空值</td>\n</tr>\n<tr>\n<td>修改主码值</td>\n<td>可能破坏参照完整性</td>\n<td>拒绝/联级操作/设置为空值</td>\n</tr>\n</tbody></table>\n<p><em>备注:拒绝(NO ACTION),联级(CASCADE)</em></p>\n<h4 id=\"IV-用户定义完整性\"><a href=\"#IV-用户定义完整性\" class=\"headerlink\" title=\"IV. 用户定义完整性\"></a>IV. 用户定义完整性</h4><ul>\n<li><p>属性上约束条件的定义: 包括列值非空(<code>NOT NULL</code>),列值唯一(<code>UNIQUE</code>),检查列值是否满足一个条件表达式(CKECK sentence)</p>\n<p>  属性上约束条件的检查和违约处理: 当往表中插入元组或修改属性的值时,DBMS将检查属性上的约束条件是否被满足,不满足拒绝执行.</p>\n</li>\n<li><p>元组上约束条件的定义: 与属性上类似,用CHECK定义元组上的约束条件,即元组级限制(可设置不同属性之间的相互约束条件)</p>\n<p>  元组上约束条件的检查和违约处理: 当往表中插入元组或修改属性的值时,DBMS将检查元组的约束条件是否被满足,不满足拒绝执行.</p>\n</li>\n</ul>\n<h4 id=\"V-完整性约束命名句子\"><a href=\"#V-完整性约束命名句子\" class=\"headerlink\" title=\"V. 完整性约束命名句子\"></a>V. 完整性约束命名句子</h4><ul>\n<li>完整性约束命名句子<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTRAINT &lt;完整性约束条件命名&gt; &lt;完整约束条件&gt;</span><br><span class=\"line\">   <span class=\"comment\"># 完整性约束条件包括: NOT NULL, UNIQUE, PRIMARY KEY, FOREEIGN KEY, CHAECK 短语等</span></span><br></pre></td></tr></table></figure></li>\n<li>修改完整性约束条件: 使用<code>ALTER TABLE sentence</code></li>\n</ul>\n<h4 id=\"VI-断言\"><a href=\"#VI-断言\" class=\"headerlink\" title=\"VI. 断言\"></a>VI. 断言</h4><p>通过声明性断言(declarative assertions)来制定更具有一般性的约束,可以定义设计多个表或聚集操作的比较复杂的完整性思想,断言创建后任何涉及关系的操作都会触发DBMS对断言的检查.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建断言</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">ASSERTION</span> &lt;断言名&gt; &lt;<span class=\"keyword\">CHECK</span> 子句&gt;</span><br><span class=\"line\"><span class=\"comment\">#删除断言</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">ASSERTION</span> &lt;断言名&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"VII-触发器\"><a href=\"#VII-触发器\" class=\"headerlink\" title=\"VII. 触发器\"></a>VII. 触发器</h4><p>触发器又叫做事件-条件-动作(event-condition-action)规则, 是用户定义在关系表上的一类由事件驱动的特殊过程, 当特定的系统事件(如表的增删改查操作,事物的结束)发生时,对规则的条件进行检查,若成立则执行</p>\n<ul>\n<li><p>定义触发器</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> &lt;触发器名&gt;  <span class=\"comment\">#每当触发事件发生时,该触发器被激活</span></span><br><span class=\"line\">    &#123;<span class=\"keyword\">BEFORE</span>|<span class=\"keyword\">AFTER</span>&#125; &lt;触发事件&gt; <span class=\"keyword\">ON</span> &lt;表名&gt; <span class=\"comment\">#指明触发器激活时是在触发器事件前或后</span></span><br><span class=\"line\">    <span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">NEW</span> | <span class=\"keyword\">OLD</span> <span class=\"keyword\">ROW</span> <span class=\"keyword\">AS</span> &lt;变量&gt;  <span class=\"comment\">#REFERENCING 指出引用的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> &#123;<span class=\"keyword\">ROW</span>|<span class=\"keyword\">STATEMENT</span>&#125;  <span class=\"comment\">#定义触发器的类型,指明动作体的频率</span></span><br><span class=\"line\">    [<span class=\"keyword\">WHEN</span> &lt;触发器条件&gt;] &lt;触发动作体&gt;  <span class=\"comment\">#仅当触发条件为真时才执行触发动作体</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活触发器: 发器的执行是由触发事件激活并由数据库服务器自动执行, 激活应遵循如下执行顺序</p>\n<ol>\n<li>执行该表上的BEFORE触发器</li>\n<li>激活触发器的SQL语句</li>\n<li>执行该表上的AFTER触发器</li>\n</ol>\n</li>\n<li><p>删除触发器</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TRIGGER</span> &lt;触发器名&gt; <span class=\"keyword\">ON</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"第六章-关系数据理论\"><a href=\"#第六章-关系数据理论\" class=\"headerlink\" title=\"第六章 关系数据理论\"></a>第六章 关系数据理论</h1><p>(一个好的关系模式应当不会发生<code>插入异常</code>,<code>删除异常</code>和<code>更新异常</code>,数据冗余应尽可能少.)</p>\n<ul>\n<li><p>数据依赖是一个关系内部属性与属性之间的约束关系,这种关系是通过属性之间的相等与否体现出来的数据相关联系;其中最重要的是 <code>函数依赖</code> 和 <code>多值依赖</code></p>\n</li>\n<li><p>规范化: 一个低一级范式的关系模式通过模式分解可以转换为若干个高一级范式的关系模型的集合,这个过程就是规范化.</p>\n<ul>\n<li><p>1NF: 第一范式.每一个分量必须不可再分的数据项.</p>\n<p>  <em>缺点: 数据冗余,插入异常,删除异常,更新异常</em></p>\n</li>\n<li><p>2NF: 第二范式.首先属于 <code>1NF</code>,且每一个非主属性完全函数依赖与任何一个候选码.</p>\n<p>  <em>缺点: 插入异常,删除异常,修改复杂</em></p>\n</li>\n<li><p>3NF: 第三范式.首先属于 <code>2NF</code>,且不存在依赖传递.</p>\n<p>  <em>并不能完全消除各种异常情况和数据冗余</em></p>\n</li>\n<li><p>BCNF: 修正第三范式.基本消除了任何属性对码的依赖传递和部分依赖.性质:</p>\n<ol>\n<li>所有非主属性对每一个码都是完全依赖关系</li>\n<li>所有主属性对每一个不包含它的码也是完全函数依赖</li>\n<li>没有任何属性完全函数依赖于非码的任何一组属性</li>\n</ol>\n</li>\n<li><p>4NF: 第四范式.不允许有非平凡且非函数依赖的多值依赖,允许的非平凡多值依赖的函数依赖</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://dl.iteye.com/upload/attachment/318920/fa4fcfba-7888-310d-bd10-a736ef1ac97d.gif\" alt=\"fanshi\"></p>\n<h2 id=\"数据依赖的公理系统\"><a href=\"#数据依赖的公理系统\" class=\"headerlink\" title=\"数据依赖的公理系统\"></a>数据依赖的公理系统</h2><h4 id=\"1-Armstrong公理系统\"><a href=\"#1-Armstrong公理系统\" class=\"headerlink\" title=\"1. Armstrong公理系统\"></a>1. Armstrong公理系统</h4><p>Armstrong是一个有效且完备的公理系统, 公理系统是模式分解算法的理论基础</p>\n<p>设 U 为属性集总体: F是U上的一组函数依赖,于是有关系模型R&lt;U,F&gt;.对于R&lt;U,F&gt;来说有以下推理规则:</p>\n<ul>\n<li>自反律: 若Y⊆X⊆U,则X-&gt;Y为F所蕴含</li>\n<li>增广律: 若X-&gt;Y为F所蕴含,且Z⊆U, 则XZ-&gt;YZ为F所蕴含</li>\n<li>传递律: 若X-&gt;Y及Y-&gt;Z为F所蕴含,则X-&gt;Z为F所蕴含</li>\n</ul>\n<p>推导:</p>\n<ul>\n<li>合并规则:由X-&gt;Y, X-&gt;Z,有X-&gt;YZ</li>\n<li>伪传递规则:由X-&gt;Y, WY-&gt;Z,有XW-&gt;Z</li>\n<li>分解规则:由X-&gt;Y及Z⊆Y,有X-&gt;Z</li>\n</ul>\n<h4 id=\"2-闭包F\"><a href=\"#2-闭包F\" class=\"headerlink\" title=\"2. 闭包F+\"></a>2. 闭包F+</h4><p>在关系模式R&lt;U,F&gt;中为F所逻辑蕴含的函数依赖的全体叫作F的闭包,即为F+.</p>\n<h4 id=\"3-X关于函数依赖集F的闭包XF\"><a href=\"#3-X关于函数依赖集F的闭包XF\" class=\"headerlink\" title=\"3. X关于函数依赖集F的闭包XF+\"></a>3. X关于函数依赖集F的闭包XF+</h4><p>定义:设$F$为属性集$U$上的一组函数依赖, $X⊆U$,$X_{F^+}={A|X-&gt;A能由F根据Armstrong公理导出}$,$X_{F^+}$称为属性集X关于函数依赖集F的闭包</p>\n<h4 id=\"4-最小依赖集\"><a href=\"#4-最小依赖集\" class=\"headerlink\" title=\"4. 最小依赖集\"></a>4. 最小依赖集</h4><p>又称最小覆盖,满足以下条件:</p>\n<ul>\n<li>F中任一函数依赖的右部只含有一个属性</li>\n<li>F中不存在这样的函数依赖X-&gt;A,使得F与F-{X-&gt;A}等价</li>\n<li>F中不存在这样的函数依赖X-&gt;A,X有真子集Z使得F-{X-&gt;A}∪{Z-&gt;A}与F等价</li>\n</ul>\n<h2 id=\"模式分解定义\"><a href=\"#模式分解定义\" class=\"headerlink\" title=\"模式分解定义\"></a>模式分解定义</h2><p><strong>分解具有: 无损连接性, 保持函数依赖, 既要保持函数依赖又要具有无损连接性</strong> </p>\n<h4 id=\"1-关于模式分解的重要事实\"><a href=\"#1-关于模式分解的重要事实\" class=\"headerlink\" title=\"1. 关于模式分解的重要事实:\"></a>1. 关于模式分解的重要事实:</h4><ul>\n<li>若要求分解保持函数依赖,那一定可以达到3NF,不一定达到BCNF</li>\n<li>若要求分解保持函数依赖,又具有无损连接性,可以达到3NF,不一定达到BCNF</li>\n<li>若要求分解具有无损连接性,那一定可以达到4NF</li>\n</ul>\n<h4 id=\"2-损连接性分解\"><a href=\"#2-损连接性分解\" class=\"headerlink\" title=\"2. 损连接性分解\"></a>2. 损连接性分解</h4><p><strong>分解后的关系自然连接,完全等于分解前的关系,则这个分解相对于F是无损连接分解.</strong></p>\n<p>判断分解无损连接性的算法:</p>\n<ul>\n<li>表格法</li>\n<li>设R的分解为ρ={R1,R2},F为R所满足的函数依赖集，则分解ρ具有无损联接性的充分必要条件是：R1∩R2→(R1-R2) 或者 R1∩R2→(R2-R1)</li>\n</ul>\n<h4 id=\"3-保持函数依赖的分解\"><a href=\"#3-保持函数依赖的分解\" class=\"headerlink\" title=\"3. 保持函数依赖的分解\"></a>3. 保持函数依赖的分解</h4><p><code>Let F&#39; = F1U … FiU .. UFn</code> , 若<code>F</code>与<code>F&#39;</code>等价，即<code>F&#39;+ = F+</code> ，则保持函数依赖。</p>\n<p>判断方法：<code>F</code>所有原函数依赖可以由<code>F&#39;</code>的函数依赖逻辑导出</p>\n<h1 id=\"第七章-数据库设计概述\"><a href=\"#第七章-数据库设计概述\" class=\"headerlink\" title=\"第七章 数据库设计概述\"></a>第七章 数据库设计概述</h1><h4 id=\"1-数据库应用系统的开发也是一项软件工程-称为数据库工程\"><a href=\"#1-数据库应用系统的开发也是一项软件工程-称为数据库工程\" class=\"headerlink\" title=\"1. 数据库应用系统的开发也是一项软件工程,称为数据库工程.\"></a>1. 数据库应用系统的开发也是一项软件工程,称为数据库工程.</h4><p>数据库应用系统也有生存期的概念,通常包括六个阶段:</p>\n<ul>\n<li>需求分析阶段: 需求收集,分析,处理-&gt;DD(数据字典)和DFD(数据流图)</li>\n<li>概念设计阶段: 设计概念结构-&gt;E-R图</li>\n<li>逻辑设计阶段: 设计逻辑结构和数据模型</li>\n<li>物理设计阶段: 关系模式存取方法(B+树,hash索引,聚簇存取),设计物理文件存储结构</li>\n<li>实现阶段: 物理实现,实验性运行</li>\n<li>运行维护阶段: 使用,维护数据库</li>\n</ul>\n<h4 id=\"2-概念设计的主要步骤\"><a href=\"#2-概念设计的主要步骤\" class=\"headerlink\" title=\"2. 概念设计的主要步骤:\"></a>2. 概念设计的主要步骤:</h4><ol>\n<li>机型数据抽象,设计局部概念模式</li>\n<li>将局部概念模式综合成全局概念模式</li>\n<li>评审</li>\n</ol>\n<h4 id=\"3-采用E-R法进行数据库概念设计分三步\"><a href=\"#3-采用E-R法进行数据库概念设计分三步\" class=\"headerlink\" title=\"3. 采用E-R法进行数据库概念设计分三步:\"></a>3. 采用E-R法进行数据库概念设计分三步:</h4><ol>\n<li>首先设计局部E-R模式</li>\n<li>然后把各局部E-R模式综合成全局E-R模式</li>\n<li>最后对全局E-R模式进行优化</li>\n</ol>\n<h4 id=\"4-逻辑结构设计-把E-R图转换为与选用DBMS支持的数据模型相符合的逻辑结构\"><a href=\"#4-逻辑结构设计-把E-R图转换为与选用DBMS支持的数据模型相符合的逻辑结构\" class=\"headerlink\" title=\"4. 逻辑结构设计: 把E-R图转换为与选用DBMS支持的数据模型相符合的逻辑结构\"></a>4. 逻辑结构设计: 把E-R图转换为与选用DBMS支持的数据模型相符合的逻辑结构</h4><h4 id=\"5-数据模型优化-其结果不唯一-方法为\"><a href=\"#5-数据模型优化-其结果不唯一-方法为\" class=\"headerlink\" title=\"5. 数据模型优化:其结果不唯一,方法为:\"></a>5. 数据模型优化:其结果不唯一,方法为:</h4><ol>\n<li>确定数据依赖</li>\n<li>消除冗余关系</li>\n<li>确定关系模式处于第几范式</li>\n<li>根据需求分析确定哪种模式适合应用环境(并非范式化越高越优)</li>\n</ol>\n<h4 id=\"6-E-R图向关系转化的原则\"><a href=\"#6-E-R图向关系转化的原则\" class=\"headerlink\" title=\"6. E-R图向关系转化的原则:\"></a>6. E-R图向关系转化的原则:</h4><ul>\n<li>一个实体型转换为一个关系模式.(属性, 码)</li>\n<li>1:1联系可转为独立关系模式,也可与其一合并.(若合并,联系的属性也一同合并)</li>\n<li>1:n联系可转为独立关系模式,也可与n端合并.(若合并,联系的属性也一同合并)</li>\n<li>三个或三个以上实体间的多元联系应转为一个关系模式.</li>\n<li>具有相同码的关系可合并</li>\n</ul>\n<h1 id=\"第八章-SQL编程\"><a href=\"#第八章-SQL编程\" class=\"headerlink\" title=\"第八章 SQL编程\"></a>第八章 SQL编程</h1><p>主语言为C,其格式为 <code>EXEC SQL &lt;SQL语句&gt;</code></p>\n<p>主语言为Java,其格式为 <code># SQL {&lt;SQL语句&gt;}</code></p>\n<p>建立嵌入式SQL的连接语法: <code>EXEC SQL CONNECT TO target [AS connect-name][USERT user-name]</code> (备注:target是要连接的数据库服务器)</p>\n<h4 id=\"1-存储过程\"><a href=\"#1-存储过程\" class=\"headerlink\" title=\"1. 存储过程\"></a>1. 存储过程</h4><ol>\n<li>创建存储过程:</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SQL</span> <span class=\"keyword\">REPLACE</span> <span class=\"keyword\">PROCEDURE</span> 过程名 ([参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,...])</span><br><span class=\"line\">    <span class=\"keyword\">AS</span> &lt;过程化<span class=\"keyword\">SQL</span>块&gt;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>执行存储过程:</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CALL</span>/PERFORM <span class=\"keyword\">PROCEDURE</span> 过程名 ([参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,...]);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改存储过程:</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">PROCEDURE</span> 过程名<span class=\"number\">1</span> <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> 过程名<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>删除存储过程:</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> 过程名;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-ODBC-由用户应用程序-ODBC驱动程序管理器-数据库驱动程序-数据源构成\"><a href=\"#2-ODBC-由用户应用程序-ODBC驱动程序管理器-数据库驱动程序-数据源构成\" class=\"headerlink\" title=\"2. ODBC: 由用户应用程序+ODBC驱动程序管理器+数据库驱动程序+数据源构成\"></a>2. ODBC: 由用户应用程序+ODBC驱动程序管理器+数据库驱动程序+数据源构成</h4><ul>\n<li>其工作流程:</li>\n<li>配置数据源</li>\n<li>初始化环境</li>\n<li>建立连接</li>\n<li>分配语句句柄</li>\n<li>执行SQL语句</li>\n<li>结果处理集</li>\n<li>终止处理</li>\n</ul>\n<h1 id=\"第九章-查询优化\"><a href=\"#第九章-查询优化\" class=\"headerlink\" title=\"第九章 查询优化\"></a>第九章 查询优化</h1><p>步骤为:</p>\n<ul>\n<li>查询分析:语法,词法</li>\n<li>查询检查:语义,权限,安全性检查</li>\n<li>查询优化:代数优化,物理优化</li>\n<li>查询执行:代码生成</li>\n</ul>\n<p>查询优化的目的就是为了系统在执行时既省时间又能提高效率，在关系代数运算中，通常是先进行笛卡尔积或联接运算，再进行选择和投影，恰当地安排选择、投影和联接的顺序，就可实现查询优化。优化的策略主要有以下几点：</p>\n<ul>\n<li>在关系代数表达式中尽可能早地执行选择操作(早做选择).</li>\n<li>把笛卡尔积和随后的选择操作合并成连接运算 (尽可能做自然连接或等值连接，不做笛卡尔积).</li>\n<li>同时计算一连串的选择和投影操作，使操作对象尽可能变小。</li>\n<li>连接多个对象时，先做连接结果小的连接。</li>\n<li>计算表达式之前先估计一下怎么计算合算</li>\n</ul>\n<h1 id=\"第十章-数据库恢复技术\"><a href=\"#第十章-数据库恢复技术\" class=\"headerlink\" title=\"第十章 数据库恢复技术\"></a>第十章 数据库恢复技术</h1><h5 id=\"1-事务是数据库的逻辑工作单位，其特点-原子性、一致性、隔离性和持续性\"><a href=\"#1-事务是数据库的逻辑工作单位，其特点-原子性、一致性、隔离性和持续性\" class=\"headerlink\" title=\"1. 事务是数据库的逻辑工作单位，其特点:原子性、一致性、隔离性和持续性\"></a>1. 事务是数据库的逻辑工作单位，其特点:原子性、一致性、隔离性和持续性</h5><p>定义事务的语句一般有三条:<code>BEGIN TRANSATION</code>; <code>COMMIT</code>; <code>ROLLBACK</code>;</p>\n<ol>\n<li><p>事务开始通常由BEGIN TRANSACTION, COMMIT或ROLLBACK结束,</p>\n</li>\n<li><p>commit提交事务的所有操作,</p>\n</li>\n<li><p>rollback表示回滚,即事务运行中发生了故障,系统将事务中对数据库的所有已完成的操作全部撤销,回滚到事务开始的状态</p>\n</li>\n</ol>\n<h4 id=\"2-故障类型\"><a href=\"#2-故障类型\" class=\"headerlink\" title=\"2. 故障类型:\"></a>2. 故障类型:</h4><p>事物故障,系统故障和介质故障</p>\n<h4 id=\"3-恢复中最常用的技术\"><a href=\"#3-恢复中最常用的技术\" class=\"headerlink\" title=\"3. 恢复中最常用的技术:\"></a>3. 恢复中最常用的技术:</h4><p>数据库转储,登记日志文件</p>\n<h4 id=\"4-恢复的基本原理\"><a href=\"#4-恢复的基本原理\" class=\"headerlink\" title=\"4. 恢复的基本原理:\"></a>4. 恢复的基本原理:</h4><p>利用存储的备份副本,日志文件或数据库镜像中冗余的数据来重建数据库</p>\n<h4 id=\"5-常用恢复技术\"><a href=\"#5-常用恢复技术\" class=\"headerlink\" title=\"5. 常用恢复技术:\"></a>5. 常用恢复技术:</h4><ul>\n<li>事物故障的回复:UNDO</li>\n<li>系统故障的恢复:未提交的事物做UNDO,以提交的做REDO</li>\n<li>介质事物的恢复:重装备份并恢复到一致性状态+REDO</li>\n</ul>\n<h4 id=\"6-提高恢复效率的技术\"><a href=\"#6-提高恢复效率的技术\" class=\"headerlink\" title=\"6. 提高恢复效率的技术\"></a>6. 提高恢复效率的技术</h4><p>检查点技术</p>\n<ul>\n<li>可以提高系统故障的恢复效率</li>\n<li>可以在一定程度上提高利用动态转储备份进行介质故障恢复的效率</li>\n</ul>\n<p>镜像技术</p>\n<ul>\n<li>镜像技术可以改善介质故障的恢复效率</li>\n</ul>\n<h1 id=\"第十一章-并发控制\"><a href=\"#第十一章-并发控制\" class=\"headerlink\" title=\"第十一章 并发控制\"></a>第十一章 并发控制</h1><h4 id=\"1-数据库的并发控制以事务为单位-每一时刻只有一个事务在运行-在单处理机系统中-事务的并行执行实际上是并行操作轮流交叉运行\"><a href=\"#1-数据库的并发控制以事务为单位-每一时刻只有一个事务在运行-在单处理机系统中-事务的并行执行实际上是并行操作轮流交叉运行\" class=\"headerlink\" title=\"1. 数据库的并发控制以事务为单位,每一时刻只有一个事务在运行(在单处理机系统中,事务的并行执行实际上是并行操作轮流交叉运行)\"></a>1. 数据库的并发控制以事务为单位,每一时刻只有一个事务在运行(在单处理机系统中,事务的并行执行实际上是并行操作轮流交叉运行)</h4><h4 id=\"2-数据库的并发控制通常使用封锁机制-也有时间戳-乐观控制法-多本并发控制等其他方法-其基本类型有两种排他锁-又称写锁-X锁-和共享锁-又称读锁-S锁\"><a href=\"#2-数据库的并发控制通常使用封锁机制-也有时间戳-乐观控制法-多本并发控制等其他方法-其基本类型有两种排他锁-又称写锁-X锁-和共享锁-又称读锁-S锁\" class=\"headerlink\" title=\"2. 数据库的并发控制通常使用封锁机制(也有时间戳,乐观控制法,多本并发控制等其他方法), 其基本类型有两种排他锁(又称写锁, X锁)和共享锁(又称读锁, S锁)\"></a>2. 数据库的并发控制通常使用封锁机制(也有时间戳,乐观控制法,多本并发控制等其他方法), 其基本类型有两种排他锁(又称写锁, X锁)和共享锁(又称读锁, S锁)</h4><table>\n<thead>\n<tr>\n<th>横向为事务T1,纵向为事务T2</th>\n<th>X</th>\n<th>S</th>\n<th>-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>S</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>—————————</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>备注:Y相容请求,N不相容请求</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"3-常用的封锁协议\"><a href=\"#3-常用的封锁协议\" class=\"headerlink\" title=\"3. 常用的封锁协议\"></a>3. 常用的封锁协议</h4><p>不同级别的封锁协议提供不同的数据一致性保证,提供不同的数据共享度.</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>定义</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一级</td>\n<td>事务T在修改数据R前必须先加X锁,直到事务结束才释放</td>\n<td>可以防止丢失修改并保证事务可恢复</td>\n<td>不保证可重复读和不读脏数据</td>\n</tr>\n<tr>\n<td>二级</td>\n<td>在一级基础上,增加事务T在读取数据R前必须加S锁,读完后立即释放</td>\n<td>可防止丢失修改和读脏数据</td>\n<td>不保证可重复读</td>\n</tr>\n<tr>\n<td>三级</td>\n<td>在一级基础上,增加事务T读取数据R前必须加S锁,直到事务结束才释放</td>\n<td>可防止丢失修改和读脏数据</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-并发控制机制调度并发事务操作是否正确的判别准则是可串行性\"><a href=\"#4-并发控制机制调度并发事务操作是否正确的判别准则是可串行性\" class=\"headerlink\" title=\"4. 并发控制机制调度并发事务操作是否正确的判别准则是可串行性\"></a>4. 并发控制机制调度并发事务操作是否正确的判别准则是可串行性</h4><ul>\n<li><p>并发操作的正确准则性通常由两段锁协议保证(2PL)</p>\n<ul>\n<li>获得封锁,在对任何数据读写之前要申请并获取对该数据的封锁</li>\n<li>释放封锁,释放封锁之后,事务不再申请和获得任何其他锁</li>\n</ul>\n</li>\n<li><p>两段锁协议是可串行化调度的充分条件,但不是并要条件</p>\n</li>\n</ul>\n<h4 id=\"5-对象数据施加封锁-带来问题\"><a href=\"#5-对象数据施加封锁-带来问题\" class=\"headerlink\" title=\"5. 对象数据施加封锁,带来问题\"></a>5. 对象数据施加封锁,带来问题</h4><ul>\n<li>活锁:解决额方法,先来先服务</li>\n<li>死锁:预防方法,一次封锁法,顺序封锁法</li>\n</ul>\n<h4 id=\"6-死锁的诊断与解除\"><a href=\"#6-死锁的诊断与解除\" class=\"headerlink\" title=\"6. 死锁的诊断与解除:\"></a>6. 死锁的诊断与解除:</h4><p>超时法和等待图法</p>\n<h4 id=\"7-封锁粒度\"><a href=\"#7-封锁粒度\" class=\"headerlink\" title=\"7. 封锁粒度:\"></a>7. 封锁粒度:</h4><p>封锁的粒度越大-&gt;数据库能封锁的数据单元越少,并发度越小,系统开销越小;粒度越小,则相反.</p>\n<p>多粒度封锁分为:</p>\n<ul>\n<li>显式封锁:直接加到数据对象上的封锁</li>\n<li>隐式封锁:由于其上级结点加锁而使该数据对象加锁</li>\n</ul>\n<h4 id=\"8-意向锁-intention-lock\"><a href=\"#8-意向锁-intention-lock\" class=\"headerlink\" title=\"8. 意向锁(intention lock)\"></a>8. 意向锁(intention lock)</h4><ul>\n<li>目的:提高对某个数据对象加锁时系统的检查效率</li>\n<li>IS, IX, SIX锁</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>I have recently studied the database again, so take a note</p>","more":"<h1 id=\"第一章-绪论\"><a href=\"#第一章-绪论\" class=\"headerlink\" title=\"第一章 绪论\"></a>第一章 绪论</h1><h4 id=\"1-数据管理技术的发展阶段\"><a href=\"#1-数据管理技术的发展阶段\" class=\"headerlink\" title=\"1. 数据管理技术的发展阶段 :\"></a>1. <strong>数据管理技术的发展阶段</strong> :</h4><ul>\n<li>人工管理阶段</li>\n<li>文件系统阶段</li>\n<li>数据库阶段</li>\n</ul>\n<p><em>其中文件阶段到数据库阶段是质的飞跃.</em></p>\n<h4 id=\"2-名词概念\"><a href=\"#2-名词概念\" class=\"headerlink\" title=\"2. 名词概念\"></a>2. <strong>名词概念</strong></h4><ul>\n<li>数据 描述事务的符号被称为数据.</li>\n<li>DB DataBase数据库,是长期存储在计算机内,有组织,可共享的大量数据集合.</li>\n<li>DBMS 数据库管理系统.</li>\n<li>DBS 数据库系统,由DB+DBMS+应用程序+数据库管理员(DBA)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>人工管理阶段</strong></th>\n<th><strong>文件系统阶段</strong></th>\n<th><strong>数据库系统阶段</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>背景</em></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>应用背景</strong></td>\n<td>科学计算</td>\n<td>科学计算,数据管理</td>\n<td>大规模数据管理</td>\n</tr>\n<tr>\n<td><strong>硬件背景</strong></td>\n<td>无直接存储设备</td>\n<td>硬盘,磁鼓</td>\n<td>大容量磁盘,磁盘阵列</td>\n</tr>\n<tr>\n<td><strong>软件背景</strong></td>\n<td>没有操作系统</td>\n<td>有文件系统</td>\n<td>有数据库管理系统</td>\n</tr>\n<tr>\n<td><strong>处理方式</strong></td>\n<td>批处理</td>\n<td>联机实时处理,批处理</td>\n<td>联机实时处理,批处理,分布处理</td>\n</tr>\n<tr>\n<td><em>特点</em></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>数据管理者</strong></td>\n<td>用户(程序员)</td>\n<td>文件系统</td>\n<td>数据库管理系统</td>\n</tr>\n<tr>\n<td><strong>数据面向的对象</strong></td>\n<td>应用程序</td>\n<td>应用</td>\n<td>现实世界(如:一个企业)</td>\n</tr>\n<tr>\n<td><strong>数据的共享程度</strong></td>\n<td>无共享,冗余度最大</td>\n<td>共享性差,冗余度大</td>\n<td>共享性高,冗余度小</td>\n</tr>\n<tr>\n<td><strong>数据的独立性</strong></td>\n<td>不独立,完全依赖程序</td>\n<td>独立性差</td>\n<td>高度物理独立性和一定逻辑独立性</td>\n</tr>\n<tr>\n<td><strong>数据的结构化</strong></td>\n<td>无结构</td>\n<td>记录内有结构,整体无结构</td>\n<td>整体结构化,模型描述</td>\n</tr>\n<tr>\n<td><strong>数据控制能力</strong></td>\n<td>程序控制</td>\n<td>程序控制</td>\n<td>数据管理系统</td>\n</tr>\n</tbody></table>\n<p><strong>数据模型</strong> :对现实数据特征的抽象 (现实世界_-&gt;信息时间诶-&gt;机器世界)</p>\n<h4 id=\"3-数据模型的基本概念-关系模型\"><a href=\"#3-数据模型的基本概念-关系模型\" class=\"headerlink\" title=\"3. 数据模型的基本概念(关系模型)\"></a>3. 数据模型的基本概念(关系模型)</h4><table>\n<thead>\n<tr>\n<th>名次</th>\n<th>英文名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>实体</td>\n<td>enity</td>\n<td>客观存在并可相互区别的事物</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>attribute</td>\n<td>实体所具有的某一特性</td>\n</tr>\n<tr>\n<td>码</td>\n<td>key</td>\n<td>唯一标识实体的属性称为码</td>\n</tr>\n<tr>\n<td>实体型</td>\n<td>entitty</td>\n<td>用实体名及其属性名集合来抽象和刻画同类实体</td>\n</tr>\n<tr>\n<td>实体集</td>\n<td>enityset</td>\n<td>同一类实体的集合</td>\n</tr>\n<tr>\n<td>联系</td>\n<td>relationship</td>\n<td>实体内部联系常指组成实体的各属性之间的联系,之间的联系指不同实体集之间的联系</td>\n</tr>\n<tr>\n<td>联系的种类</td>\n<td></td>\n<td>一对一,一对多,多对多</td>\n</tr>\n<tr>\n<td>关系</td>\n<td>relation</td>\n<td>一对关系对应一张表</td>\n</tr>\n<tr>\n<td>元组</td>\n<td>tuple</td>\n<td>表中一行为一个元组</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>attitude</td>\n<td>表中一列为一个属性</td>\n</tr>\n<tr>\n<td>码</td>\n<td>key</td>\n<td>又称码键,表中的某一个属性可以唯一确认一个元组</td>\n</tr>\n<tr>\n<td>域</td>\n<td>domain</td>\n<td>具有相同数据类型的值的集合</td>\n</tr>\n<tr>\n<td>分量</td>\n<td></td>\n<td>元组中的一个属性值</td>\n</tr>\n<tr>\n<td>关系模式</td>\n<td></td>\n<td>对关系的表述,一般表示为:关系名(attitude1, attitude2 …)</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-数据模型分类\"><a href=\"#4-数据模型分类\" class=\"headerlink\" title=\"4. 数据模型分类.\"></a>4. 数据模型分类.</h4><p><strong>根据应用不同,第一类是概念模型,第二类是逻辑模型和物理模型</strong>.</p>\n<ul>\n<li><strong>概念模型</strong> :也称为信息模型,是按用户的观点来对数据和信息建模,主要用于数据库设计.其中一种表示方法: <em>实体-联系方法</em>又称 <code>E-R</code> 方法, 使用 <code>E-R</code> 图实现.</li>\n<li><strong>逻辑模型</strong> :主要包括 层次模型 网状模型 关系模型,另外还有 面象对象数据模型 对象关系模型 半结构化模型 等,是按计算机系统的观点对数据建模,主要用于数据库管理系统的实现.</li>\n<li><strong>物理模型</strong> :是对数据最底层的抽象,它描述数据在系统内部的表示方式和存储方法,或在磁盘或磁带上的存储方式和存取方法,是面向计算机的.</li>\n</ul>\n<p><strong>层次模型</strong> </p>\n<pre><code>定义:\n    1. 有且只有一个节点没有双亲节点 \n    2. 根以外其他节点有且只有一个双亲节点 \n优点:\n    1. 数据结构较清晰 \n    2. 查询效率高 \n    3. 提供了良好的完整性支持   \n缺点:\n    1. 现实世界大多不是层次关系 \n    2. 查询子女节点必须通过双亲节点 \n    3. 结构过于严密,层次命令趋于程序化 </code></pre><p><strong>网状模型</strong></p>\n<pre><code>定义:\n    1. 允许一个以上的节点无双亲节点 \n    2. 一个节点可有多于一个的双亲节点    \n优点:\n    1. 更直接的描述世界 \n    2. 具有良好的性能,存取效率高  \n缺点:\n    1. 结构较复杂 \n    2. 需要嵌入高级语言,用户不易掌握,不易使用 \n    3. 记录之间的联系通过存取路径实现,因此用户必须了解系统结构的细节 </code></pre><p><strong>关系模型</strong></p>\n<pre><code>定义:\n    要求关系必须是规范化的,即每一个分量不可再分    \n优点:\n    1. 建立在严格的数学概念上 \n    2. 概念单一,数据结构简单,清晰 \n    3. 存取路径对用户透明,数据的独立性,安全保密性更好 \n缺点:\n    查询效率低,需要优化  </code></pre><h4 id=\"5-数据模型\"><a href=\"#5-数据模型\" class=\"headerlink\" title=\"5. 数据模型\"></a>5. 数据模型</h4><p><strong>组成要素: <code>数据结构</code>+<code>数据操作</code>+<code>数据完整行约束条件</code></strong></p>\n<ul>\n<li>数据结构: 描述数据库的组成对象及对象之间的联系.</li>\n<li>数据操作: 指对数据库中各种对象的实例(值)允许执行的操作的集合,包括操作及有关的操作规则.</li>\n<li>完整性约束条件: 是一组完整性规则.</li>\n</ul>\n<h4 id=\"6-三级结构模式\"><a href=\"#6-三级结构模式\" class=\"headerlink\" title=\"6. 三级结构模式\"></a>6. 三级结构模式</h4><p><strong>数据库的体系结构分为三级: <code>内部级</code>, <code>概念级</code>和<code>外部级</code>.</strong></p>\n<ul>\n<li>模式(概念级): 是数据库中全体数据的逻辑结构和特征的描述,是所有用户的公共数据视图.</li>\n<li>外模式(外部级): 能够看见和使用的局部数据的逻辑结构和特征的描述,是数据库用户的数据视图.</li>\n<li>内模式(内部级): 也称为存储模式,一个数据库只有一个内模式,最接近物理存储,涉及到实际数据存储的结构,是数据在数据库内部的组织方式.</li>\n</ul>\n<h4 id=\"7-两层映像\"><a href=\"#7-两层映像\" class=\"headerlink\" title=\"7. 两层映像\"></a>7. 两层映像</h4><p>(<strong>保证了数据库系统中的数据能够具有较高的逻辑独立性和物理独立性</strong>)</p>\n<ul>\n<li>模式/内模式映像: 用于定义概念模式和内模式之间的对应性.一般在内模式中描述.</li>\n<li>外模式/模式映像: 用于定义外模式和概念模式之间的对应性.一般在外模式中描述.</li>\n</ul>\n<h4 id=\"8-两级数据独立性\"><a href=\"#8-两级数据独立性\" class=\"headerlink\" title=\"8. 两级数据独立性\"></a>8. 两级数据独立性</h4><ul>\n<li>物理数据独立性:修改内模式时尽量不影响概念模式及外模式,则达到物理数据独立性.</li>\n<li>逻辑数据独立性: 修改概念模式时尽量不影响外模式和应用程序.</li>\n</ul>\n<h4 id=\"9-硬件平台及数据库\"><a href=\"#9-硬件平台及数据库\" class=\"headerlink\" title=\"9. 硬件平台及数据库\"></a>9. 硬件平台及数据库</h4><ul>\n<li>要足够大的内存</li>\n<li>足够大的磁盘或磁盘阵列等设备存放数据库,作数据备份</li>\n<li>系统有较高的通道能力,以提高数据传送效率</li>\n</ul>\n<h4 id=\"10-软件\"><a href=\"#10-软件\" class=\"headerlink\" title=\"10. 软件\"></a>10. 软件</h4><ul>\n<li>DBMS</li>\n<li>支持DBMS的OS</li>\n<li>相应的高级语言操作数据库</li>\n<li>以DBMS为核心的开发工具</li>\n</ul>\n<h4 id=\"12-人员\"><a href=\"#12-人员\" class=\"headerlink\" title=\"12. 人员\"></a>12. 人员</h4><ul>\n<li>DMA:<ol>\n<li>决定数据库的信息内容和结构.</li>\n<li>决定数据库的存储结构和存取策略.</li>\n<li>定义数据的安全性要求和完整约束条件.</li>\n<li>监控数据库的运行和使用.</li>\n<li>数据库的改进和重构.</li>\n</ol>\n</li>\n<li>系统分析员和数据库设计人员</li>\n<li>应用程序人员</li>\n</ul>\n<h1 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h1><h2 id=\"一-关系模型\"><a href=\"#一-关系模型\" class=\"headerlink\" title=\"一.关系模型\"></a>一.关系模型</h2><blockquote>\n<p>可形式化表示为 <code>R(U, D, DOM, F)</code><br><br><code>R</code> 为关系名，<code>U</code> 为属性名集合，<code>D</code> 为 <code>U</code> 中属性所来自的域<br><br><code>DOM</code> 为属性向域的映像集合，<code>F</code> 为属性间数据的依赖关系集合<br><br>关系模型只包含单一的数据结构——关系（是笛卡尔积的有限子集）<br><br>用户看来其中的数据逻辑结构是一张扁平的二维表<br></p>\n</blockquote>\n<h4 id=\"1-码\"><a href=\"#1-码\" class=\"headerlink\" title=\"1. 码\"></a>1. 码</h4><p> <strong>由一个或几个属性组成</strong></p>\n<ul>\n<li>候选码: 可以唯一标识每一组的属性组</li>\n<li>主码: 用户选做元组标识的一个候选键位主键</li>\n<li>外码: 某个关系的主码相应的属性在另一关系中出现,此时主键就是另一个关系的外码</li>\n</ul>\n<h4 id=\"2-三种关系类型\"><a href=\"#2-三种关系类型\" class=\"headerlink\" title=\"2. 三种关系类型\"></a>2. 三种关系类型</h4><ol>\n<li>基本关系(或基表,是实际存在的表,实际存储数据的逻辑表示),</li>\n<li>查询表(是查询结果对应的表),</li>\n<li>视图表(是由基本表或其他试图表导出,是虚表).</li>\n</ol>\n<h4 id=\"3-基本关系的六条性质\"><a href=\"#3-基本关系的六条性质\" class=\"headerlink\" title=\"3. 基本关系的六条性质\"></a>3. 基本关系的六条性质</h4><ol>\n<li>列是同质的</li>\n<li>不同列可出自同一域</li>\n<li>列的顺序无所谓</li>\n<li>行的顺序无所谓</li>\n<li>任意两个元组的候选码不能同值</li>\n<li>分量必须是原子值,即每一个分量都是比不可分的</li>\n</ol>\n<h2 id=\"二-关系完整性\"><a href=\"#二-关系完整性\" class=\"headerlink\" title=\"二.关系完整性\"></a>二.关系完整性</h2><blockquote>\n<p>关系模型有三类: <code>实体完整性</code>, <code>参照完整性</code>, <code>用户定义完整性</code>.前两个必须满足,称为关系的两个不变性.</p>\n</blockquote>\n<ul>\n<li>实体完整性规则: 要求关系中组成主码的属性不能有空值</li>\n<li>参照完整性规则: 要求不引用不存在的实体,但可以空值</li>\n<li>用户自定义完整性规则: 有具体应用环境决定,系统提供定义和检验这类完整性的机制</li>\n</ul>\n<h2 id=\"三-关系代数\"><a href=\"#三-关系代数\" class=\"headerlink\" title=\"三.关系代数\"></a>三.关系代数</h2><blockquote>\n<p>一种抽象的查询语言,是对关系运算来表达查询</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>∪</th>\n<th>∩</th>\n<th>-</th>\n<th>×</th>\n<th>σ</th>\n<th>Π</th>\n<th>⋈</th>\n<th>÷</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>含义</td>\n<td>并</td>\n<td>交</td>\n<td>差</td>\n<td>迪卡尔积</td>\n<td>选择</td>\n<td>投影</td>\n<td>连接</td>\n<td>除</td>\n</tr>\n</tbody></table>\n<p><em>注:前四个<code>集合运算</code>, 后四个<code>关系运算</code></em></p>\n<h2 id=\"四-关系数据库标准语言SQL\"><a href=\"#四-关系数据库标准语言SQL\" class=\"headerlink\" title=\"四.关系数据库标准语言SQL\"></a>四.关系数据库标准语言SQL</h2><h3 id=\"1-SQL特点\"><a href=\"#1-SQL特点\" class=\"headerlink\" title=\"1. SQL特点\"></a>1. SQL特点</h3><ul>\n<li>综合统一</li>\n<li>高度非过程化</li>\n<li>面向集合的操作方式</li>\n<li>以同一中语法结构提供多种使用方式</li>\n<li>语言简单,易学易用</li>\n</ul>\n<h3 id=\"2-数据定义-模型定义-表定义-视图-索引\"><a href=\"#2-数据定义-模型定义-表定义-视图-索引\" class=\"headerlink\" title=\"2. 数据定义: 模型定义,表定义,视图,索引\"></a>2. 数据定义: <code>模型定义</code>,<code>表定义</code>,<code>视图</code>,<code>索引</code></h3><ul>\n<li><p>创建模式</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt; [&lt;表定义&gt;|&lt;视图定义&gt;|&lt;授权定义&gt;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除模式</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> &lt;模式名&gt; &lt;<span class=\"keyword\">CASCADE</span> | RESTRICT&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建表</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> &lt;表名&gt; (&lt;列名&gt;&lt;数据类型&gt; [列级完整性约束条件]</span><br><span class=\"line\">[, &lt;列名&gt;&lt;数据类型&gt; [列级完整性约束条件]]</span><br><span class=\"line\">...</span><br><span class=\"line\">[, &lt;表级完整性约束条件&gt;]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除表</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> &lt;表名&gt; &lt;<span class=\"keyword\">CASCADE</span> | RESTRICT&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改表</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> &lt;表名&gt;</span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> [<span class=\"keyword\">COLUMN</span>] &lt;新列名&gt; &lt;数据类型&gt; [完整性约束]]</span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> &lt;表级完整性约束&gt;]</span><br><span class=\"line\">[<span class=\"keyword\">DROP</span> [<span class=\"keyword\">COLUMN</span>] &lt;列名&gt; [<span class=\"keyword\">CASCADE</span> | RESTRICT] ]</span><br><span class=\"line\">[<span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> &lt;完整性约束名&gt; [RESTRICT | <span class=\"keyword\">CASCADE</span>] ]</span><br><span class=\"line\">[<span class=\"keyword\">ALTER</span> <span class=\"keyword\">COLUMN</span> &lt;列名&gt; &lt;数据类型&gt;]</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">UNIQUE</span>] [CLUSTER] <span class=\"keyword\">INDEX</span> &lt;索引名&gt;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> &lt;表名&gt;( &lt;列名&gt; [&lt;次序&gt;]  [, &lt;列名&gt; [&lt;次序&gt;]] ... );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">INDEX</span> &lt;旧索引名&gt; <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> &lt;新索引名&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> &lt;索引名&gt;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-数据查询\"><a href=\"#3-数据查询\" class=\"headerlink\" title=\"3. 数据查询\"></a>3. 数据查询</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">ALL</span> | <span class=\"keyword\">DISTINCT</span>] &lt;目标列表达式&gt; [, &lt;目标列表达式&gt;] ...</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> &lt;表名|视图名&gt; [, &lt;表名|视图名&gt; ...] | (&lt;<span class=\"keyword\">SELECT</span>语句&gt;) [<span class=\"keyword\">AS</span>] &lt;别名&gt;</span><br><span class=\"line\">    [<span class=\"keyword\">WHERE</span> &lt;条件表达式&gt;]</span><br><span class=\"line\">    [<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &lt;列名<span class=\"number\">1</span>&gt; [<span class=\"keyword\">HAVING</span> &lt;条件表达式&gt;]]</span><br><span class=\"line\">    [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &lt;列名<span class=\"number\">2</span>&gt; [<span class=\"keyword\">ASC</span>|<span class=\"keyword\">DESC</span>]]</span><br><span class=\"line\">    ;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>查询条件</strong></th>\n<th><strong>谓词</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>比较</td>\n<td><code>=</code> <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>!=</code> <code>&lt;&gt;</code> <code>!&gt;</code> <code>!&lt;</code></td>\n</tr>\n<tr>\n<td>确定范围</td>\n<td><code>BETWEEN AND</code> <code>NOT BETWEEN AND</code></td>\n</tr>\n<tr>\n<td>确定集合</td>\n<td><code>IN</code> <code>NOT IN</code></td>\n</tr>\n<tr>\n<td>字符匹配</td>\n<td><code>LIKE</code> <code>NOT LIKE</code></td>\n</tr>\n<tr>\n<td>空值</td>\n<td><code>IS NULL</code> <code>IS NOT NULL</code></td>\n</tr>\n<tr>\n<td>逻辑运算</td>\n<td><code>AND</code> <code>OR</code> <code>NOT</code></td>\n</tr>\n</tbody></table>\n<p><strong>聚集函数</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>函数名</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>COUNT(*)</code></td>\n<td>统计元组个数</td>\n</tr>\n<tr>\n<td><code>COUNT( [DISTINCT/ALL] &lt;列名&gt; )</code></td>\n<td>统计一列中值的个数</td>\n</tr>\n<tr>\n<td><code>SUM( [DISTINCT/ALL] &lt;列名&gt; )</code></td>\n<td>计算一列值的总和</td>\n</tr>\n<tr>\n<td><code>AVG( [DISTINCT/ALL] &lt;列名&gt; )</code></td>\n<td>计算一列值的平均值</td>\n</tr>\n<tr>\n<td><code>MAX( [DISTINCT/ALL] &lt;列名&gt; )</code></td>\n<td>求一列的最大值</td>\n</tr>\n<tr>\n<td><code>MIN( [DISTINCT/ALL] &lt;列名&gt; )</code></td>\n<td>求一列的最小值</td>\n</tr>\n</tbody></table>\n<p><strong>GROUP BY 子句</strong></p>\n<p>将查询结果按某一列或多列的值分组,值相等的为一组</p>\n<blockquote>\n<p>(分组后聚集函数将作用于每一个组,即每一个组都有一个函数值)</p>\n</blockquote>\n<h3 id=\"4-数据更新\"><a href=\"#4-数据更新\" class=\"headerlink\" title=\"4. 数据更新\"></a>4. 数据更新</h3><ul>\n<li><p>插入元组</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> &lt;表名&gt; [(&lt;属性列<span class=\"number\">1</span>&gt; [,&lt;属性列<span class=\"number\">2</span>&gt;] ...)]</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(&lt;常量<span class=\"number\">1</span>&gt; [,&lt;常量<span class=\"number\">2</span>&gt;] ...);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>插入子查询结构</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> &lt;表名&gt; [(&lt;属性列<span class=\"number\">1</span>&gt; [, &lt;属性列<span class=\"number\">2</span>&gt;] ...)]</span><br><span class=\"line\">子查询;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改数据</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> &lt;表名&gt; <span class=\"keyword\">SET</span> &lt;列名&gt;=&lt;表达式&gt; [,&lt;列名&gt;=&lt;表达式&gt;] ...</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> &lt;条件&gt;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除数据</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> &lt;表名&gt;</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> &lt;条件&gt;]</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"5-视图\"><a href=\"#5-视图\" class=\"headerlink\" title=\"5. 视图\"></a>5. 视图</h3><ul>\n<li><p>创建视图</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> &lt;视图名&gt; [(&lt;列名&gt; [,&lt;列名&gt;] ...)]</span><br><span class=\"line\"><span class=\"keyword\">AS</span> &lt;子查询&gt;</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> <span class=\"keyword\">OPTION</span>]</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除视图</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> &lt;视图名&gt; [<span class=\"keyword\">CASCADE</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新视图: 对视图的查询和基本表相同,但是更新操作受到以下三条规则限制</p>\n<ul>\n<li>如果试图从多个基本表使用联合操作导出,则不允许更新</li>\n<li>如果导出的视图使用了分组和聚合操作,也不允许更新</li>\n<li>如果视图从单个基本表使用选择和投影导出,并包括了主码或某个候选码,则可以操作</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-数据安全性\"><a href=\"#6-数据安全性\" class=\"headerlink\" title=\"6. 数据安全性\"></a>6. 数据安全性</h3><blockquote>\n<p>数据安全性是指保护数据库以防止不合法使用所造成的数据泄漏,更改或破坏</p>\n</blockquote>\n<h4 id=\"I-数据的不安全因素\"><a href=\"#I-数据的不安全因素\" class=\"headerlink\" title=\"I. 数据的不安全因素\"></a>I. 数据的不安全因素</h4><ul>\n<li>非授权用户对数据库的恶意存取和破坏</li>\n<li>数据库中重要或敏感的数据被泄漏</li>\n<li>安全环境的脆弱性</li>\n</ul>\n<h4 id=\"II-实现数据库系统安全的技术和方法\"><a href=\"#II-实现数据库系统安全的技术和方法\" class=\"headerlink\" title=\"II. 实现数据库系统安全的技术和方法\"></a>II. 实现数据库系统安全的技术和方法</h4><p>有多种,最重要的是<code>存取控制技术</code>和<code>审计技术</code>,目前许多大型DBMS达到的<strong>C2</strong>级,其安全版本达到<strong>B1</strong>.</p>\n<p><strong>C2</strong>级的DBMS必须具有自主存取控制功能和审计功能,<strong>B1</strong>级的必须具有强制存取控制功能和增强的审计功能.</p>\n<p>自主存取控制功能一般是通过<strong>SQL</strong>的<code>GRANT</code>语句和<code>REVOKE</code>语句来实现.</p>\n<h4 id=\"III-常用存取控制方法\"><a href=\"#III-常用存取控制方法\" class=\"headerlink\" title=\"III. 常用存取控制方法\"></a>III. 常用存取控制方法</h4><ul>\n<li><p>自主存取控制 (Discretionary Access Control,DAC)</p>\n<p>  同一用户对于不同的数据对象有不同的存取权限,不同用户对同一对象也不同权限,用户还可以将其拥有的存取权限转授其他用户</p>\n</li>\n<li><p>强制存取控制 (Mandatory Access Control,MAC)</p>\n<p>  每一个数据对象被标记一定的密级,每一个用户也被授予某一个级别的许可证,对于任意一个对象,只有具有合法许可证的用户才可以存取</p>\n</li>\n</ul>\n<h3 id=\"7-数据完整性\"><a href=\"#7-数据完整性\" class=\"headerlink\" title=\"7. 数据完整性\"></a>7. 数据完整性</h3><h4 id=\"I-维护数据库的完整性-DBMS必须实现\"><a href=\"#I-维护数据库的完整性-DBMS必须实现\" class=\"headerlink\" title=\"I. 维护数据库的完整性,DBMS必须实现:\"></a>I. 维护数据库的完整性,DBMS必须实现:</h4><ul>\n<li>提供定义完整性约束条件的机制</li>\n<li>提供完整性检查的方法</li>\n<li>进行违约处理</li>\n</ul>\n<h4 id=\"II-实体完整性检查和违约处理\"><a href=\"#II-实体完整性检查和违约处理\" class=\"headerlink\" title=\"II. 实体完整性检查和违约处理:\"></a>II. 实体完整性检查和违约处理:</h4><blockquote>\n<p>在列级,表级定义主码后,每更新一次,DBMS将自动检查(有全表扫描,B+树索引)</p>\n</blockquote>\n<ul>\n<li>检查主码值是否唯一,如果不唯一则拒绝插入或修改</li>\n<li>检查主码的各个属性是否为空值,只有一个空值就拒绝插入或修改</li>\n</ul>\n<h4 id=\"III-参照完整性\"><a href=\"#III-参照完整性\" class=\"headerlink\" title=\"III. 参照完整性\"></a>III. 参照完整性</h4><blockquote>\n<p>用<code>FOREIGN KEY</code>短语定义哪些列为外码<br><br>用<code>reference</code>指明这些外码参照哪些表的主码,参照完整性检查和违约处理</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>被参照表</th>\n<th>参照表</th>\n<th>违约处理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>可能破坏参照完整性</td>\n<td>插入元组</td>\n<td>拒绝</td>\n</tr>\n<tr>\n<td>可能破坏参照完整性</td>\n<td>修改外码值</td>\n<td>拒绝</td>\n</tr>\n<tr>\n<td>删除元组</td>\n<td>可能破坏参照完整性</td>\n<td>拒绝/联级删除/设置为空值</td>\n</tr>\n<tr>\n<td>修改主码值</td>\n<td>可能破坏参照完整性</td>\n<td>拒绝/联级操作/设置为空值</td>\n</tr>\n</tbody></table>\n<p><em>备注:拒绝(NO ACTION),联级(CASCADE)</em></p>\n<h4 id=\"IV-用户定义完整性\"><a href=\"#IV-用户定义完整性\" class=\"headerlink\" title=\"IV. 用户定义完整性\"></a>IV. 用户定义完整性</h4><ul>\n<li><p>属性上约束条件的定义: 包括列值非空(<code>NOT NULL</code>),列值唯一(<code>UNIQUE</code>),检查列值是否满足一个条件表达式(CKECK sentence)</p>\n<p>  属性上约束条件的检查和违约处理: 当往表中插入元组或修改属性的值时,DBMS将检查属性上的约束条件是否被满足,不满足拒绝执行.</p>\n</li>\n<li><p>元组上约束条件的定义: 与属性上类似,用CHECK定义元组上的约束条件,即元组级限制(可设置不同属性之间的相互约束条件)</p>\n<p>  元组上约束条件的检查和违约处理: 当往表中插入元组或修改属性的值时,DBMS将检查元组的约束条件是否被满足,不满足拒绝执行.</p>\n</li>\n</ul>\n<h4 id=\"V-完整性约束命名句子\"><a href=\"#V-完整性约束命名句子\" class=\"headerlink\" title=\"V. 完整性约束命名句子\"></a>V. 完整性约束命名句子</h4><ul>\n<li>完整性约束命名句子<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTRAINT &lt;完整性约束条件命名&gt; &lt;完整约束条件&gt;</span><br><span class=\"line\">   <span class=\"comment\"># 完整性约束条件包括: NOT NULL, UNIQUE, PRIMARY KEY, FOREEIGN KEY, CHAECK 短语等</span></span><br></pre></td></tr></table></figure></li>\n<li>修改完整性约束条件: 使用<code>ALTER TABLE sentence</code></li>\n</ul>\n<h4 id=\"VI-断言\"><a href=\"#VI-断言\" class=\"headerlink\" title=\"VI. 断言\"></a>VI. 断言</h4><p>通过声明性断言(declarative assertions)来制定更具有一般性的约束,可以定义设计多个表或聚集操作的比较复杂的完整性思想,断言创建后任何涉及关系的操作都会触发DBMS对断言的检查.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建断言</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">ASSERTION</span> &lt;断言名&gt; &lt;<span class=\"keyword\">CHECK</span> 子句&gt;</span><br><span class=\"line\"><span class=\"comment\">#删除断言</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">ASSERTION</span> &lt;断言名&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"VII-触发器\"><a href=\"#VII-触发器\" class=\"headerlink\" title=\"VII. 触发器\"></a>VII. 触发器</h4><p>触发器又叫做事件-条件-动作(event-condition-action)规则, 是用户定义在关系表上的一类由事件驱动的特殊过程, 当特定的系统事件(如表的增删改查操作,事物的结束)发生时,对规则的条件进行检查,若成立则执行</p>\n<ul>\n<li><p>定义触发器</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> &lt;触发器名&gt;  <span class=\"comment\">#每当触发事件发生时,该触发器被激活</span></span><br><span class=\"line\">    &#123;<span class=\"keyword\">BEFORE</span>|<span class=\"keyword\">AFTER</span>&#125; &lt;触发事件&gt; <span class=\"keyword\">ON</span> &lt;表名&gt; <span class=\"comment\">#指明触发器激活时是在触发器事件前或后</span></span><br><span class=\"line\">    <span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">NEW</span> | <span class=\"keyword\">OLD</span> <span class=\"keyword\">ROW</span> <span class=\"keyword\">AS</span> &lt;变量&gt;  <span class=\"comment\">#REFERENCING 指出引用的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> &#123;<span class=\"keyword\">ROW</span>|<span class=\"keyword\">STATEMENT</span>&#125;  <span class=\"comment\">#定义触发器的类型,指明动作体的频率</span></span><br><span class=\"line\">    [<span class=\"keyword\">WHEN</span> &lt;触发器条件&gt;] &lt;触发动作体&gt;  <span class=\"comment\">#仅当触发条件为真时才执行触发动作体</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活触发器: 发器的执行是由触发事件激活并由数据库服务器自动执行, 激活应遵循如下执行顺序</p>\n<ol>\n<li>执行该表上的BEFORE触发器</li>\n<li>激活触发器的SQL语句</li>\n<li>执行该表上的AFTER触发器</li>\n</ol>\n</li>\n<li><p>删除触发器</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TRIGGER</span> &lt;触发器名&gt; <span class=\"keyword\">ON</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"第六章-关系数据理论\"><a href=\"#第六章-关系数据理论\" class=\"headerlink\" title=\"第六章 关系数据理论\"></a>第六章 关系数据理论</h1><p>(一个好的关系模式应当不会发生<code>插入异常</code>,<code>删除异常</code>和<code>更新异常</code>,数据冗余应尽可能少.)</p>\n<ul>\n<li><p>数据依赖是一个关系内部属性与属性之间的约束关系,这种关系是通过属性之间的相等与否体现出来的数据相关联系;其中最重要的是 <code>函数依赖</code> 和 <code>多值依赖</code></p>\n</li>\n<li><p>规范化: 一个低一级范式的关系模式通过模式分解可以转换为若干个高一级范式的关系模型的集合,这个过程就是规范化.</p>\n<ul>\n<li><p>1NF: 第一范式.每一个分量必须不可再分的数据项.</p>\n<p>  <em>缺点: 数据冗余,插入异常,删除异常,更新异常</em></p>\n</li>\n<li><p>2NF: 第二范式.首先属于 <code>1NF</code>,且每一个非主属性完全函数依赖与任何一个候选码.</p>\n<p>  <em>缺点: 插入异常,删除异常,修改复杂</em></p>\n</li>\n<li><p>3NF: 第三范式.首先属于 <code>2NF</code>,且不存在依赖传递.</p>\n<p>  <em>并不能完全消除各种异常情况和数据冗余</em></p>\n</li>\n<li><p>BCNF: 修正第三范式.基本消除了任何属性对码的依赖传递和部分依赖.性质:</p>\n<ol>\n<li>所有非主属性对每一个码都是完全依赖关系</li>\n<li>所有主属性对每一个不包含它的码也是完全函数依赖</li>\n<li>没有任何属性完全函数依赖于非码的任何一组属性</li>\n</ol>\n</li>\n<li><p>4NF: 第四范式.不允许有非平凡且非函数依赖的多值依赖,允许的非平凡多值依赖的函数依赖</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://dl.iteye.com/upload/attachment/318920/fa4fcfba-7888-310d-bd10-a736ef1ac97d.gif\" alt=\"fanshi\"></p>\n<h2 id=\"数据依赖的公理系统\"><a href=\"#数据依赖的公理系统\" class=\"headerlink\" title=\"数据依赖的公理系统\"></a>数据依赖的公理系统</h2><h4 id=\"1-Armstrong公理系统\"><a href=\"#1-Armstrong公理系统\" class=\"headerlink\" title=\"1. Armstrong公理系统\"></a>1. Armstrong公理系统</h4><p>Armstrong是一个有效且完备的公理系统, 公理系统是模式分解算法的理论基础</p>\n<p>设 U 为属性集总体: F是U上的一组函数依赖,于是有关系模型R&lt;U,F&gt;.对于R&lt;U,F&gt;来说有以下推理规则:</p>\n<ul>\n<li>自反律: 若Y⊆X⊆U,则X-&gt;Y为F所蕴含</li>\n<li>增广律: 若X-&gt;Y为F所蕴含,且Z⊆U, 则XZ-&gt;YZ为F所蕴含</li>\n<li>传递律: 若X-&gt;Y及Y-&gt;Z为F所蕴含,则X-&gt;Z为F所蕴含</li>\n</ul>\n<p>推导:</p>\n<ul>\n<li>合并规则:由X-&gt;Y, X-&gt;Z,有X-&gt;YZ</li>\n<li>伪传递规则:由X-&gt;Y, WY-&gt;Z,有XW-&gt;Z</li>\n<li>分解规则:由X-&gt;Y及Z⊆Y,有X-&gt;Z</li>\n</ul>\n<h4 id=\"2-闭包F\"><a href=\"#2-闭包F\" class=\"headerlink\" title=\"2. 闭包F+\"></a>2. 闭包F+</h4><p>在关系模式R&lt;U,F&gt;中为F所逻辑蕴含的函数依赖的全体叫作F的闭包,即为F+.</p>\n<h4 id=\"3-X关于函数依赖集F的闭包XF\"><a href=\"#3-X关于函数依赖集F的闭包XF\" class=\"headerlink\" title=\"3. X关于函数依赖集F的闭包XF+\"></a>3. X关于函数依赖集F的闭包XF+</h4><p>定义:设$F$为属性集$U$上的一组函数依赖, $X⊆U$,$X_{F^+}={A|X-&gt;A能由F根据Armstrong公理导出}$,$X_{F^+}$称为属性集X关于函数依赖集F的闭包</p>\n<h4 id=\"4-最小依赖集\"><a href=\"#4-最小依赖集\" class=\"headerlink\" title=\"4. 最小依赖集\"></a>4. 最小依赖集</h4><p>又称最小覆盖,满足以下条件:</p>\n<ul>\n<li>F中任一函数依赖的右部只含有一个属性</li>\n<li>F中不存在这样的函数依赖X-&gt;A,使得F与F-{X-&gt;A}等价</li>\n<li>F中不存在这样的函数依赖X-&gt;A,X有真子集Z使得F-{X-&gt;A}∪{Z-&gt;A}与F等价</li>\n</ul>\n<h2 id=\"模式分解定义\"><a href=\"#模式分解定义\" class=\"headerlink\" title=\"模式分解定义\"></a>模式分解定义</h2><p><strong>分解具有: 无损连接性, 保持函数依赖, 既要保持函数依赖又要具有无损连接性</strong> </p>\n<h4 id=\"1-关于模式分解的重要事实\"><a href=\"#1-关于模式分解的重要事实\" class=\"headerlink\" title=\"1. 关于模式分解的重要事实:\"></a>1. 关于模式分解的重要事实:</h4><ul>\n<li>若要求分解保持函数依赖,那一定可以达到3NF,不一定达到BCNF</li>\n<li>若要求分解保持函数依赖,又具有无损连接性,可以达到3NF,不一定达到BCNF</li>\n<li>若要求分解具有无损连接性,那一定可以达到4NF</li>\n</ul>\n<h4 id=\"2-损连接性分解\"><a href=\"#2-损连接性分解\" class=\"headerlink\" title=\"2. 损连接性分解\"></a>2. 损连接性分解</h4><p><strong>分解后的关系自然连接,完全等于分解前的关系,则这个分解相对于F是无损连接分解.</strong></p>\n<p>判断分解无损连接性的算法:</p>\n<ul>\n<li>表格法</li>\n<li>设R的分解为ρ={R1,R2},F为R所满足的函数依赖集，则分解ρ具有无损联接性的充分必要条件是：R1∩R2→(R1-R2) 或者 R1∩R2→(R2-R1)</li>\n</ul>\n<h4 id=\"3-保持函数依赖的分解\"><a href=\"#3-保持函数依赖的分解\" class=\"headerlink\" title=\"3. 保持函数依赖的分解\"></a>3. 保持函数依赖的分解</h4><p><code>Let F&#39; = F1U … FiU .. UFn</code> , 若<code>F</code>与<code>F&#39;</code>等价，即<code>F&#39;+ = F+</code> ，则保持函数依赖。</p>\n<p>判断方法：<code>F</code>所有原函数依赖可以由<code>F&#39;</code>的函数依赖逻辑导出</p>\n<h1 id=\"第七章-数据库设计概述\"><a href=\"#第七章-数据库设计概述\" class=\"headerlink\" title=\"第七章 数据库设计概述\"></a>第七章 数据库设计概述</h1><h4 id=\"1-数据库应用系统的开发也是一项软件工程-称为数据库工程\"><a href=\"#1-数据库应用系统的开发也是一项软件工程-称为数据库工程\" class=\"headerlink\" title=\"1. 数据库应用系统的开发也是一项软件工程,称为数据库工程.\"></a>1. 数据库应用系统的开发也是一项软件工程,称为数据库工程.</h4><p>数据库应用系统也有生存期的概念,通常包括六个阶段:</p>\n<ul>\n<li>需求分析阶段: 需求收集,分析,处理-&gt;DD(数据字典)和DFD(数据流图)</li>\n<li>概念设计阶段: 设计概念结构-&gt;E-R图</li>\n<li>逻辑设计阶段: 设计逻辑结构和数据模型</li>\n<li>物理设计阶段: 关系模式存取方法(B+树,hash索引,聚簇存取),设计物理文件存储结构</li>\n<li>实现阶段: 物理实现,实验性运行</li>\n<li>运行维护阶段: 使用,维护数据库</li>\n</ul>\n<h4 id=\"2-概念设计的主要步骤\"><a href=\"#2-概念设计的主要步骤\" class=\"headerlink\" title=\"2. 概念设计的主要步骤:\"></a>2. 概念设计的主要步骤:</h4><ol>\n<li>机型数据抽象,设计局部概念模式</li>\n<li>将局部概念模式综合成全局概念模式</li>\n<li>评审</li>\n</ol>\n<h4 id=\"3-采用E-R法进行数据库概念设计分三步\"><a href=\"#3-采用E-R法进行数据库概念设计分三步\" class=\"headerlink\" title=\"3. 采用E-R法进行数据库概念设计分三步:\"></a>3. 采用E-R法进行数据库概念设计分三步:</h4><ol>\n<li>首先设计局部E-R模式</li>\n<li>然后把各局部E-R模式综合成全局E-R模式</li>\n<li>最后对全局E-R模式进行优化</li>\n</ol>\n<h4 id=\"4-逻辑结构设计-把E-R图转换为与选用DBMS支持的数据模型相符合的逻辑结构\"><a href=\"#4-逻辑结构设计-把E-R图转换为与选用DBMS支持的数据模型相符合的逻辑结构\" class=\"headerlink\" title=\"4. 逻辑结构设计: 把E-R图转换为与选用DBMS支持的数据模型相符合的逻辑结构\"></a>4. 逻辑结构设计: 把E-R图转换为与选用DBMS支持的数据模型相符合的逻辑结构</h4><h4 id=\"5-数据模型优化-其结果不唯一-方法为\"><a href=\"#5-数据模型优化-其结果不唯一-方法为\" class=\"headerlink\" title=\"5. 数据模型优化:其结果不唯一,方法为:\"></a>5. 数据模型优化:其结果不唯一,方法为:</h4><ol>\n<li>确定数据依赖</li>\n<li>消除冗余关系</li>\n<li>确定关系模式处于第几范式</li>\n<li>根据需求分析确定哪种模式适合应用环境(并非范式化越高越优)</li>\n</ol>\n<h4 id=\"6-E-R图向关系转化的原则\"><a href=\"#6-E-R图向关系转化的原则\" class=\"headerlink\" title=\"6. E-R图向关系转化的原则:\"></a>6. E-R图向关系转化的原则:</h4><ul>\n<li>一个实体型转换为一个关系模式.(属性, 码)</li>\n<li>1:1联系可转为独立关系模式,也可与其一合并.(若合并,联系的属性也一同合并)</li>\n<li>1:n联系可转为独立关系模式,也可与n端合并.(若合并,联系的属性也一同合并)</li>\n<li>三个或三个以上实体间的多元联系应转为一个关系模式.</li>\n<li>具有相同码的关系可合并</li>\n</ul>\n<h1 id=\"第八章-SQL编程\"><a href=\"#第八章-SQL编程\" class=\"headerlink\" title=\"第八章 SQL编程\"></a>第八章 SQL编程</h1><p>主语言为C,其格式为 <code>EXEC SQL &lt;SQL语句&gt;</code></p>\n<p>主语言为Java,其格式为 <code># SQL {&lt;SQL语句&gt;}</code></p>\n<p>建立嵌入式SQL的连接语法: <code>EXEC SQL CONNECT TO target [AS connect-name][USERT user-name]</code> (备注:target是要连接的数据库服务器)</p>\n<h4 id=\"1-存储过程\"><a href=\"#1-存储过程\" class=\"headerlink\" title=\"1. 存储过程\"></a>1. 存储过程</h4><ol>\n<li>创建存储过程:</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SQL</span> <span class=\"keyword\">REPLACE</span> <span class=\"keyword\">PROCEDURE</span> 过程名 ([参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,...])</span><br><span class=\"line\">    <span class=\"keyword\">AS</span> &lt;过程化<span class=\"keyword\">SQL</span>块&gt;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>执行存储过程:</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CALL</span>/PERFORM <span class=\"keyword\">PROCEDURE</span> 过程名 ([参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,...]);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改存储过程:</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">PROCEDURE</span> 过程名<span class=\"number\">1</span> <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> 过程名<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>删除存储过程:</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> 过程名;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-ODBC-由用户应用程序-ODBC驱动程序管理器-数据库驱动程序-数据源构成\"><a href=\"#2-ODBC-由用户应用程序-ODBC驱动程序管理器-数据库驱动程序-数据源构成\" class=\"headerlink\" title=\"2. ODBC: 由用户应用程序+ODBC驱动程序管理器+数据库驱动程序+数据源构成\"></a>2. ODBC: 由用户应用程序+ODBC驱动程序管理器+数据库驱动程序+数据源构成</h4><ul>\n<li>其工作流程:</li>\n<li>配置数据源</li>\n<li>初始化环境</li>\n<li>建立连接</li>\n<li>分配语句句柄</li>\n<li>执行SQL语句</li>\n<li>结果处理集</li>\n<li>终止处理</li>\n</ul>\n<h1 id=\"第九章-查询优化\"><a href=\"#第九章-查询优化\" class=\"headerlink\" title=\"第九章 查询优化\"></a>第九章 查询优化</h1><p>步骤为:</p>\n<ul>\n<li>查询分析:语法,词法</li>\n<li>查询检查:语义,权限,安全性检查</li>\n<li>查询优化:代数优化,物理优化</li>\n<li>查询执行:代码生成</li>\n</ul>\n<p>查询优化的目的就是为了系统在执行时既省时间又能提高效率，在关系代数运算中，通常是先进行笛卡尔积或联接运算，再进行选择和投影，恰当地安排选择、投影和联接的顺序，就可实现查询优化。优化的策略主要有以下几点：</p>\n<ul>\n<li>在关系代数表达式中尽可能早地执行选择操作(早做选择).</li>\n<li>把笛卡尔积和随后的选择操作合并成连接运算 (尽可能做自然连接或等值连接，不做笛卡尔积).</li>\n<li>同时计算一连串的选择和投影操作，使操作对象尽可能变小。</li>\n<li>连接多个对象时，先做连接结果小的连接。</li>\n<li>计算表达式之前先估计一下怎么计算合算</li>\n</ul>\n<h1 id=\"第十章-数据库恢复技术\"><a href=\"#第十章-数据库恢复技术\" class=\"headerlink\" title=\"第十章 数据库恢复技术\"></a>第十章 数据库恢复技术</h1><h5 id=\"1-事务是数据库的逻辑工作单位，其特点-原子性、一致性、隔离性和持续性\"><a href=\"#1-事务是数据库的逻辑工作单位，其特点-原子性、一致性、隔离性和持续性\" class=\"headerlink\" title=\"1. 事务是数据库的逻辑工作单位，其特点:原子性、一致性、隔离性和持续性\"></a>1. 事务是数据库的逻辑工作单位，其特点:原子性、一致性、隔离性和持续性</h5><p>定义事务的语句一般有三条:<code>BEGIN TRANSATION</code>; <code>COMMIT</code>; <code>ROLLBACK</code>;</p>\n<ol>\n<li><p>事务开始通常由BEGIN TRANSACTION, COMMIT或ROLLBACK结束,</p>\n</li>\n<li><p>commit提交事务的所有操作,</p>\n</li>\n<li><p>rollback表示回滚,即事务运行中发生了故障,系统将事务中对数据库的所有已完成的操作全部撤销,回滚到事务开始的状态</p>\n</li>\n</ol>\n<h4 id=\"2-故障类型\"><a href=\"#2-故障类型\" class=\"headerlink\" title=\"2. 故障类型:\"></a>2. 故障类型:</h4><p>事物故障,系统故障和介质故障</p>\n<h4 id=\"3-恢复中最常用的技术\"><a href=\"#3-恢复中最常用的技术\" class=\"headerlink\" title=\"3. 恢复中最常用的技术:\"></a>3. 恢复中最常用的技术:</h4><p>数据库转储,登记日志文件</p>\n<h4 id=\"4-恢复的基本原理\"><a href=\"#4-恢复的基本原理\" class=\"headerlink\" title=\"4. 恢复的基本原理:\"></a>4. 恢复的基本原理:</h4><p>利用存储的备份副本,日志文件或数据库镜像中冗余的数据来重建数据库</p>\n<h4 id=\"5-常用恢复技术\"><a href=\"#5-常用恢复技术\" class=\"headerlink\" title=\"5. 常用恢复技术:\"></a>5. 常用恢复技术:</h4><ul>\n<li>事物故障的回复:UNDO</li>\n<li>系统故障的恢复:未提交的事物做UNDO,以提交的做REDO</li>\n<li>介质事物的恢复:重装备份并恢复到一致性状态+REDO</li>\n</ul>\n<h4 id=\"6-提高恢复效率的技术\"><a href=\"#6-提高恢复效率的技术\" class=\"headerlink\" title=\"6. 提高恢复效率的技术\"></a>6. 提高恢复效率的技术</h4><p>检查点技术</p>\n<ul>\n<li>可以提高系统故障的恢复效率</li>\n<li>可以在一定程度上提高利用动态转储备份进行介质故障恢复的效率</li>\n</ul>\n<p>镜像技术</p>\n<ul>\n<li>镜像技术可以改善介质故障的恢复效率</li>\n</ul>\n<h1 id=\"第十一章-并发控制\"><a href=\"#第十一章-并发控制\" class=\"headerlink\" title=\"第十一章 并发控制\"></a>第十一章 并发控制</h1><h4 id=\"1-数据库的并发控制以事务为单位-每一时刻只有一个事务在运行-在单处理机系统中-事务的并行执行实际上是并行操作轮流交叉运行\"><a href=\"#1-数据库的并发控制以事务为单位-每一时刻只有一个事务在运行-在单处理机系统中-事务的并行执行实际上是并行操作轮流交叉运行\" class=\"headerlink\" title=\"1. 数据库的并发控制以事务为单位,每一时刻只有一个事务在运行(在单处理机系统中,事务的并行执行实际上是并行操作轮流交叉运行)\"></a>1. 数据库的并发控制以事务为单位,每一时刻只有一个事务在运行(在单处理机系统中,事务的并行执行实际上是并行操作轮流交叉运行)</h4><h4 id=\"2-数据库的并发控制通常使用封锁机制-也有时间戳-乐观控制法-多本并发控制等其他方法-其基本类型有两种排他锁-又称写锁-X锁-和共享锁-又称读锁-S锁\"><a href=\"#2-数据库的并发控制通常使用封锁机制-也有时间戳-乐观控制法-多本并发控制等其他方法-其基本类型有两种排他锁-又称写锁-X锁-和共享锁-又称读锁-S锁\" class=\"headerlink\" title=\"2. 数据库的并发控制通常使用封锁机制(也有时间戳,乐观控制法,多本并发控制等其他方法), 其基本类型有两种排他锁(又称写锁, X锁)和共享锁(又称读锁, S锁)\"></a>2. 数据库的并发控制通常使用封锁机制(也有时间戳,乐观控制法,多本并发控制等其他方法), 其基本类型有两种排他锁(又称写锁, X锁)和共享锁(又称读锁, S锁)</h4><table>\n<thead>\n<tr>\n<th>横向为事务T1,纵向为事务T2</th>\n<th>X</th>\n<th>S</th>\n<th>-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>S</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>—————————</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>备注:Y相容请求,N不相容请求</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"3-常用的封锁协议\"><a href=\"#3-常用的封锁协议\" class=\"headerlink\" title=\"3. 常用的封锁协议\"></a>3. 常用的封锁协议</h4><p>不同级别的封锁协议提供不同的数据一致性保证,提供不同的数据共享度.</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>定义</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一级</td>\n<td>事务T在修改数据R前必须先加X锁,直到事务结束才释放</td>\n<td>可以防止丢失修改并保证事务可恢复</td>\n<td>不保证可重复读和不读脏数据</td>\n</tr>\n<tr>\n<td>二级</td>\n<td>在一级基础上,增加事务T在读取数据R前必须加S锁,读完后立即释放</td>\n<td>可防止丢失修改和读脏数据</td>\n<td>不保证可重复读</td>\n</tr>\n<tr>\n<td>三级</td>\n<td>在一级基础上,增加事务T读取数据R前必须加S锁,直到事务结束才释放</td>\n<td>可防止丢失修改和读脏数据</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-并发控制机制调度并发事务操作是否正确的判别准则是可串行性\"><a href=\"#4-并发控制机制调度并发事务操作是否正确的判别准则是可串行性\" class=\"headerlink\" title=\"4. 并发控制机制调度并发事务操作是否正确的判别准则是可串行性\"></a>4. 并发控制机制调度并发事务操作是否正确的判别准则是可串行性</h4><ul>\n<li><p>并发操作的正确准则性通常由两段锁协议保证(2PL)</p>\n<ul>\n<li>获得封锁,在对任何数据读写之前要申请并获取对该数据的封锁</li>\n<li>释放封锁,释放封锁之后,事务不再申请和获得任何其他锁</li>\n</ul>\n</li>\n<li><p>两段锁协议是可串行化调度的充分条件,但不是并要条件</p>\n</li>\n</ul>\n<h4 id=\"5-对象数据施加封锁-带来问题\"><a href=\"#5-对象数据施加封锁-带来问题\" class=\"headerlink\" title=\"5. 对象数据施加封锁,带来问题\"></a>5. 对象数据施加封锁,带来问题</h4><ul>\n<li>活锁:解决额方法,先来先服务</li>\n<li>死锁:预防方法,一次封锁法,顺序封锁法</li>\n</ul>\n<h4 id=\"6-死锁的诊断与解除\"><a href=\"#6-死锁的诊断与解除\" class=\"headerlink\" title=\"6. 死锁的诊断与解除:\"></a>6. 死锁的诊断与解除:</h4><p>超时法和等待图法</p>\n<h4 id=\"7-封锁粒度\"><a href=\"#7-封锁粒度\" class=\"headerlink\" title=\"7. 封锁粒度:\"></a>7. 封锁粒度:</h4><p>封锁的粒度越大-&gt;数据库能封锁的数据单元越少,并发度越小,系统开销越小;粒度越小,则相反.</p>\n<p>多粒度封锁分为:</p>\n<ul>\n<li>显式封锁:直接加到数据对象上的封锁</li>\n<li>隐式封锁:由于其上级结点加锁而使该数据对象加锁</li>\n</ul>\n<h4 id=\"8-意向锁-intention-lock\"><a href=\"#8-意向锁-intention-lock\" class=\"headerlink\" title=\"8. 意向锁(intention lock)\"></a>8. 意向锁(intention lock)</h4><ul>\n<li>目的:提高对某个数据对象加锁时系统的检查效率</li>\n<li>IS, IX, SIX锁</li>\n</ul>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-04-29T00:23:52.538Z","updated":"2020-04-29T00:23:52.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9kxg1x20001ytn36b0jdi1g","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"How to build your blog use hexo + github","date":"2020-04-29T02:08:13.000Z","_content":"Building a personal blog is simpler than it seems\n<!--more-->\n\n## Introduction\n\nToday, we can't live without th Internet, and we can do a lot of things on it. For example, write something.\n\nOk, next I will tell you how to build a personal blog that belongs to you, and now it's actually very simple. We will use `hexo` and `github`. So I should introduce them to you.\n\nFirst, let's talk about `github`. **Github** is where people build sofware, and more than 40 million people use github ti discover, fork, and contribute to over 100 million projects. Here we will use github to do our blog server.\n\nNext, let's talk about `hexo`. **Hexo** is a static blog framework based on `Node.js`. It has few dependencies and is easy to install and use. It can easily generate static web pages and be hosted on Github and Heroku.\n\n## Just do it\n\n#### Create warehouse\n\nLog in to github first, if you don't have an account then go and register one. Next, create a new warehouse, the name of the warehouse must be like: `<github username>.github.io`.\n\nSince you need to push files to github, don’t forget to install git. If you are using a **Linux** or **macos** system, you may easily install it in the terminal, *like*:\n```shell\nsudo apt-get install git\n```\n*or like*:\n```shell\nsudo pacman -S git\n```\n\nIf these do not work, you can find the corresponding command for you system distribution on the Internet.\n\nIf you are using windows, then you may need to go to git’s official website to download it.\n\n#### Configure Hexo\n\n**Hexo** based on `Node.js`, so we need to install Node.js. As before, **Linux** and **macos** can be easily installed by command, like:\n```shell\nsudo pacman -S nodejs\n```\n\nPlease go to the official website to [download](https://nodejs.org/en/download/), if you are **windows**.\n\nDon't forget to check after installation.The command aret `node -v` and `npm -v`\n>NPM is a package management tool installed with `Node.js`, which can solve many problems in `Node.js` code deployment.Common usage scenarios are as follows:\n>- allow users to download third-party packages written by others from the NPM server for local use.\n>- allow users to download and install command line programs written by others from the NPM server for local use.\n>- allow users to upload their own packages or command line programs to the NPM server for others to use.\n>The new version of `Node.js` has integrated npm.\n\nAfter doing this, we can finally start to install `hexo`, we just use this command: \n```shell\nsudo npm install -g hexo-cli\n```\n\nThis installation takes a long time to wait patiently. When the installation is complete, initialize our blog,this command:\n```shell\nhexo init blog\n```\n\nThen you will find that there is a `blog` folder in the current directory, let's go in. It's almost the same here, but we want to deploy to `github`, so we need to do some configuration. Edit `blog/_config.yml`, modify like these:\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:zlj-zz/zlj-zz.github.io.git\n  branch: master\n```\n\nAfter modifying the configuration file, we install the git deployment plugin to deploy.\n```shell\nnpm install hexo-deployer-git --save\n```\n\nstart deploy:\n```shell\nhexo clean\nhexo g\nhexo d\n```\n\nIf there is no error in executing the command, then the website is deployed. Let's open the browser to visit it, [https://\\<github username\\>.github.io](#) \n\n\n\n**Let's look at some common command of `hexo`.**\n```shell\nnpm install hexo -g # install hexo\nnpm update hexo -g # update hexo\nhexo init # initialize\n\nhexo n \"your blog\" == hexo new \"your blog\" # new article\nhexo g == hexo generate \nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n## Choose theme\n\nWe can change the theme of the blog, you can find many themes [here](https://hexo.io/themes/) and choose to use. The theme I use is [hexo-theme-pln](https://github.com/gaoryrt/hexo-theme-pln).\n\n**Download theme like this:** \n```shell\ngit clone https://github.com/gaoryrt/hexo-theme-pln.git themes/pln\n```\n\nEdit `blog/_config.yml`, modify like these to use theme:\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: pln\n```\n\n\n\n","source":"_posts/how-to-build-your-blog.md","raw":"---\ntitle: How to build your blog use hexo + github\ncategory: hexo\ndate: 2020-04-29 10:08:13\ntags: hexo\n---\nBuilding a personal blog is simpler than it seems\n<!--more-->\n\n## Introduction\n\nToday, we can't live without th Internet, and we can do a lot of things on it. For example, write something.\n\nOk, next I will tell you how to build a personal blog that belongs to you, and now it's actually very simple. We will use `hexo` and `github`. So I should introduce them to you.\n\nFirst, let's talk about `github`. **Github** is where people build sofware, and more than 40 million people use github ti discover, fork, and contribute to over 100 million projects. Here we will use github to do our blog server.\n\nNext, let's talk about `hexo`. **Hexo** is a static blog framework based on `Node.js`. It has few dependencies and is easy to install and use. It can easily generate static web pages and be hosted on Github and Heroku.\n\n## Just do it\n\n#### Create warehouse\n\nLog in to github first, if you don't have an account then go and register one. Next, create a new warehouse, the name of the warehouse must be like: `<github username>.github.io`.\n\nSince you need to push files to github, don’t forget to install git. If you are using a **Linux** or **macos** system, you may easily install it in the terminal, *like*:\n```shell\nsudo apt-get install git\n```\n*or like*:\n```shell\nsudo pacman -S git\n```\n\nIf these do not work, you can find the corresponding command for you system distribution on the Internet.\n\nIf you are using windows, then you may need to go to git’s official website to download it.\n\n#### Configure Hexo\n\n**Hexo** based on `Node.js`, so we need to install Node.js. As before, **Linux** and **macos** can be easily installed by command, like:\n```shell\nsudo pacman -S nodejs\n```\n\nPlease go to the official website to [download](https://nodejs.org/en/download/), if you are **windows**.\n\nDon't forget to check after installation.The command aret `node -v` and `npm -v`\n>NPM is a package management tool installed with `Node.js`, which can solve many problems in `Node.js` code deployment.Common usage scenarios are as follows:\n>- allow users to download third-party packages written by others from the NPM server for local use.\n>- allow users to download and install command line programs written by others from the NPM server for local use.\n>- allow users to upload their own packages or command line programs to the NPM server for others to use.\n>The new version of `Node.js` has integrated npm.\n\nAfter doing this, we can finally start to install `hexo`, we just use this command: \n```shell\nsudo npm install -g hexo-cli\n```\n\nThis installation takes a long time to wait patiently. When the installation is complete, initialize our blog,this command:\n```shell\nhexo init blog\n```\n\nThen you will find that there is a `blog` folder in the current directory, let's go in. It's almost the same here, but we want to deploy to `github`, so we need to do some configuration. Edit `blog/_config.yml`, modify like these:\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:zlj-zz/zlj-zz.github.io.git\n  branch: master\n```\n\nAfter modifying the configuration file, we install the git deployment plugin to deploy.\n```shell\nnpm install hexo-deployer-git --save\n```\n\nstart deploy:\n```shell\nhexo clean\nhexo g\nhexo d\n```\n\nIf there is no error in executing the command, then the website is deployed. Let's open the browser to visit it, [https://\\<github username\\>.github.io](#) \n\n\n\n**Let's look at some common command of `hexo`.**\n```shell\nnpm install hexo -g # install hexo\nnpm update hexo -g # update hexo\nhexo init # initialize\n\nhexo n \"your blog\" == hexo new \"your blog\" # new article\nhexo g == hexo generate \nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n## Choose theme\n\nWe can change the theme of the blog, you can find many themes [here](https://hexo.io/themes/) and choose to use. The theme I use is [hexo-theme-pln](https://github.com/gaoryrt/hexo-theme-pln).\n\n**Download theme like this:** \n```shell\ngit clone https://github.com/gaoryrt/hexo-theme-pln.git themes/pln\n```\n\nEdit `blog/_config.yml`, modify like these to use theme:\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: pln\n```\n\n\n\n","slug":"how-to-build-your-blog","published":1,"updated":"2020-04-29T05:37:46.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9kxg1x50003ytn3gdp9dy03","content":"<p>Building a personal blog is simpler than it seems</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Today, we can’t live without th Internet, and we can do a lot of things on it. For example, write something.</p>\n<p>Ok, next I will tell you how to build a personal blog that belongs to you, and now it’s actually very simple. We will use <code>hexo</code> and <code>github</code>. So I should introduce them to you.</p>\n<p>First, let’s talk about <code>github</code>. <strong>Github</strong> is where people build sofware, and more than 40 million people use github ti discover, fork, and contribute to over 100 million projects. Here we will use github to do our blog server.</p>\n<p>Next, let’s talk about <code>hexo</code>. <strong>Hexo</strong> is a static blog framework based on <code>Node.js</code>. It has few dependencies and is easy to install and use. It can easily generate static web pages and be hosted on Github and Heroku.</p>\n<h2 id=\"Just-do-it\"><a href=\"#Just-do-it\" class=\"headerlink\" title=\"Just do it\"></a>Just do it</h2><h4 id=\"Create-warehouse\"><a href=\"#Create-warehouse\" class=\"headerlink\" title=\"Create warehouse\"></a>Create warehouse</h4><p>Log in to github first, if you don’t have an account then go and register one. Next, create a new warehouse, the name of the warehouse must be like: <code>&lt;github username&gt;.github.io</code>.</p>\n<p>Since you need to push files to github, don’t forget to install git. If you are using a <strong>Linux</strong> or <strong>macos</strong> system, you may easily install it in the terminal, <em>like</em>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<p><em>or like</em>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S git</span><br></pre></td></tr></table></figure>\n\n<p>If these do not work, you can find the corresponding command for you system distribution on the Internet.</p>\n<p>If you are using windows, then you may need to go to git’s official website to download it.</p>\n<h4 id=\"Configure-Hexo\"><a href=\"#Configure-Hexo\" class=\"headerlink\" title=\"Configure Hexo\"></a>Configure Hexo</h4><p><strong>Hexo</strong> based on <code>Node.js</code>, so we need to install Node.js. As before, <strong>Linux</strong> and <strong>macos</strong> can be easily installed by command, like:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S nodejs</span><br></pre></td></tr></table></figure>\n\n<p>Please go to the official website to <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">download</a>, if you are <strong>windows</strong>.</p>\n<p>Don’t forget to check after installation.The command aret <code>node -v</code> and <code>npm -v</code></p>\n<blockquote>\n<p>NPM is a package management tool installed with <code>Node.js</code>, which can solve many problems in <code>Node.js</code> code deployment.Common usage scenarios are as follows:</p>\n<ul>\n<li>allow users to download third-party packages written by others from the NPM server for local use.</li>\n<li>allow users to download and install command line programs written by others from the NPM server for local use.</li>\n<li>allow users to upload their own packages or command line programs to the NPM server for others to use.<br>The new version of <code>Node.js</code> has integrated npm.</li>\n</ul>\n</blockquote>\n<p>After doing this, we can finally start to install <code>hexo</code>, we just use this command: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>This installation takes a long time to wait patiently. When the installation is complete, initialize our blog,this command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n\n<p>Then you will find that there is a <code>blog</code> folder in the current directory, let’s go in. It’s almost the same here, but we want to deploy to <code>github</code>, so we need to do some configuration. Edit <code>blog/_config.yml</code>, modify like these:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:zlj-zz/zlj-zz.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>After modifying the configuration file, we install the git deployment plugin to deploy.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>start deploy:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>If there is no error in executing the command, then the website is deployed. Let’s open the browser to visit it, <a href=\"#\">https://&lt;github username&gt;.github.io</a> </p>\n<p><strong>Let’s look at some common command of <code>hexo</code>.</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g # install hexo</span><br><span class=\"line\">npm update hexo -g # update hexo</span><br><span class=\"line\">hexo init # initialize</span><br><span class=\"line\"></span><br><span class=\"line\">hexo n \"your blog\" == hexo new \"your blog\" # new article</span><br><span class=\"line\">hexo g == hexo generate </span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Choose-theme\"><a href=\"#Choose-theme\" class=\"headerlink\" title=\"Choose theme\"></a>Choose theme</h2><p>We can change the theme of the blog, you can find many themes <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">here</a> and choose to use. The theme I use is <a href=\"https://github.com/gaoryrt/hexo-theme-pln\" target=\"_blank\" rel=\"noopener\">hexo-theme-pln</a>.</p>\n<p><strong>Download theme like this:</strong> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/gaoryrt/hexo-theme-pln.git themes/pln</span><br></pre></td></tr></table></figure>\n\n<p>Edit <code>blog/_config.yml</code>, modify like these to use theme:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">pln</span></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<p>Building a personal blog is simpler than it seems</p>","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Today, we can’t live without th Internet, and we can do a lot of things on it. For example, write something.</p>\n<p>Ok, next I will tell you how to build a personal blog that belongs to you, and now it’s actually very simple. We will use <code>hexo</code> and <code>github</code>. So I should introduce them to you.</p>\n<p>First, let’s talk about <code>github</code>. <strong>Github</strong> is where people build sofware, and more than 40 million people use github ti discover, fork, and contribute to over 100 million projects. Here we will use github to do our blog server.</p>\n<p>Next, let’s talk about <code>hexo</code>. <strong>Hexo</strong> is a static blog framework based on <code>Node.js</code>. It has few dependencies and is easy to install and use. It can easily generate static web pages and be hosted on Github and Heroku.</p>\n<h2 id=\"Just-do-it\"><a href=\"#Just-do-it\" class=\"headerlink\" title=\"Just do it\"></a>Just do it</h2><h4 id=\"Create-warehouse\"><a href=\"#Create-warehouse\" class=\"headerlink\" title=\"Create warehouse\"></a>Create warehouse</h4><p>Log in to github first, if you don’t have an account then go and register one. Next, create a new warehouse, the name of the warehouse must be like: <code>&lt;github username&gt;.github.io</code>.</p>\n<p>Since you need to push files to github, don’t forget to install git. If you are using a <strong>Linux</strong> or <strong>macos</strong> system, you may easily install it in the terminal, <em>like</em>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<p><em>or like</em>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S git</span><br></pre></td></tr></table></figure>\n\n<p>If these do not work, you can find the corresponding command for you system distribution on the Internet.</p>\n<p>If you are using windows, then you may need to go to git’s official website to download it.</p>\n<h4 id=\"Configure-Hexo\"><a href=\"#Configure-Hexo\" class=\"headerlink\" title=\"Configure Hexo\"></a>Configure Hexo</h4><p><strong>Hexo</strong> based on <code>Node.js</code>, so we need to install Node.js. As before, <strong>Linux</strong> and <strong>macos</strong> can be easily installed by command, like:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S nodejs</span><br></pre></td></tr></table></figure>\n\n<p>Please go to the official website to <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">download</a>, if you are <strong>windows</strong>.</p>\n<p>Don’t forget to check after installation.The command aret <code>node -v</code> and <code>npm -v</code></p>\n<blockquote>\n<p>NPM is a package management tool installed with <code>Node.js</code>, which can solve many problems in <code>Node.js</code> code deployment.Common usage scenarios are as follows:</p>\n<ul>\n<li>allow users to download third-party packages written by others from the NPM server for local use.</li>\n<li>allow users to download and install command line programs written by others from the NPM server for local use.</li>\n<li>allow users to upload their own packages or command line programs to the NPM server for others to use.<br>The new version of <code>Node.js</code> has integrated npm.</li>\n</ul>\n</blockquote>\n<p>After doing this, we can finally start to install <code>hexo</code>, we just use this command: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>This installation takes a long time to wait patiently. When the installation is complete, initialize our blog,this command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n\n<p>Then you will find that there is a <code>blog</code> folder in the current directory, let’s go in. It’s almost the same here, but we want to deploy to <code>github</code>, so we need to do some configuration. Edit <code>blog/_config.yml</code>, modify like these:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:zlj-zz/zlj-zz.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>After modifying the configuration file, we install the git deployment plugin to deploy.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>start deploy:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>If there is no error in executing the command, then the website is deployed. Let’s open the browser to visit it, <a href=\"#\">https://&lt;github username&gt;.github.io</a> </p>\n<p><strong>Let’s look at some common command of <code>hexo</code>.</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g # install hexo</span><br><span class=\"line\">npm update hexo -g # update hexo</span><br><span class=\"line\">hexo init # initialize</span><br><span class=\"line\"></span><br><span class=\"line\">hexo n \"your blog\" == hexo new \"your blog\" # new article</span><br><span class=\"line\">hexo g == hexo generate </span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Choose-theme\"><a href=\"#Choose-theme\" class=\"headerlink\" title=\"Choose theme\"></a>Choose theme</h2><p>We can change the theme of the blog, you can find many themes <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">here</a> and choose to use. The theme I use is <a href=\"https://github.com/gaoryrt/hexo-theme-pln\" target=\"_blank\" rel=\"noopener\">hexo-theme-pln</a>.</p>\n<p><strong>Download theme like this:</strong> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/gaoryrt/hexo-theme-pln.git themes/pln</span><br></pre></td></tr></table></figure>\n\n<p>Edit <code>blog/_config.yml</code>, modify like these to use theme:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">pln</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9kxg1wy0000ytn336d88b40","category_id":"ck9kxg1x40002ytn38k989dhz","_id":"ck9kxg1x70006ytn31xmy2cx9"},{"post_id":"ck9kxg1x50003ytn3gdp9dy03","category_id":"ck9kxg1x70005ytn3f3fy30gb","_id":"ck9kxg1x80008ytn30ny0hxbw"}],"PostTag":[{"post_id":"ck9kxg1x50003ytn3gdp9dy03","tag_id":"ck9kxg1x60004ytn3aomx0jph","_id":"ck9kxg1x80007ytn36dvhe274"}],"Tag":[{"name":"hexo","_id":"ck9kxg1x60004ytn3aomx0jph"}]}}